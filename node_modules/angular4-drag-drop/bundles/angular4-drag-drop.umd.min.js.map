{"version":3,"file":"angular4-drag-drop.umd.min.js","sources":["../../packages/common/src/localization.ts","../../packages/common/src/directives/ng_class.ts","../../packages/common/src/pipes/intl.ts","../../packages/common/src/pipes/number_pipe.ts","../../packages/common/src/pipes/date_pipe.ts","../../node_modules/rxjs/src/util/tryCatch.ts","../../node_modules/rxjs/src/Subscription.ts","../../packages/common/src/location/platform_location.ts","../../packages/common/src/location/location_strategy.ts","../../packages/common/src/location/location.ts","../../packages/common/src/location/hash_location_strategy.ts","../../packages/common/src/location/path_location_strategy.ts","../../packages/common/src/location/index.ts","../../packages/common/src/directives/ng_component_outlet.ts","../../packages/common/src/directives/ng_for_of.ts","../../packages/common/src/directives/ng_if.ts","../../packages/common/src/directives/ng_switch.ts","../../packages/common/src/directives/ng_plural.ts","../../packages/common/src/directives/ng_style.ts","../../packages/common/src/directives/ng_template_outlet.ts","../../packages/common/src/directives/index.ts","../../packages/common/src/pipes/async_pipe.ts","../../packages/common/src/pipes/case_conversion_pipes.ts","../../packages/common/src/pipes/i18n_plural_pipe.ts","../../packages/common/src/pipes/i18n_select_pipe.ts","../../packages/common/src/pipes/json_pipe.ts","../../packages/common/src/pipes/slice_pipe.ts","../../packages/common/src/pipes/index.ts","../../packages/common/src/common_module.ts","../../node_modules/rxjs/src/util/root.ts","../../node_modules/rxjs/src/util/isFunction.ts","../../node_modules/rxjs/src/util/isArray.ts","../../node_modules/rxjs/src/util/isObject.ts","../../node_modules/rxjs/src/util/errorObject.ts","../../node_modules/rxjs/src/util/UnsubscriptionError.ts","../../node_modules/rxjs/src/Observer.ts","../../node_modules/rxjs/src/symbol/rxSubscriber.ts","../../node_modules/rxjs/src/Subscriber.ts","../../node_modules/rxjs/src/util/toSubscriber.ts","../../node_modules/rxjs/src/symbol/observable.ts","../../node_modules/rxjs/src/Observable.ts","../../node_modules/rxjs/src/util/ObjectUnsubscribedError.ts","../../node_modules/rxjs/src/SubjectSubscription.ts","../../node_modules/rxjs/src/Subject.ts","../../out-tsc/lib/src/drag-drop-directive.service.ts","../../out-tsc/lib/src/drag-directive.directive.ts","../../out-tsc/lib/src/drop-directive.directive.ts","../../out-tsc/lib/src/drag-drop-directive.module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, LOCALE_ID} from '@angular/core';\n/**\n * \\@experimental\n * @abstract\n */\nexport abstract class NgLocalization {\n/**\n * @abstract\n * @param {?} value\n * @return {?}\n */\ngetPluralCategory(value: any) {} }\n/**\n * Returns the plural category for a given value.\n * - \"=value\" when the case exists,\n * - the plural category otherwise\n * \n * \\@internal\n * @param {?} value\n * @param {?} cases\n * @param {?} ngLocalization\n * @return {?}\n */\nexport function getPluralCategory(\n    value: number, cases: string[], ngLocalization: NgLocalization): string {\n  let /** @type {?} */ key = `=${value}`;\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  key = ngLocalization.getPluralCategory(value);\n\n  if (cases.indexOf(key) > -1) {\n    return key;\n  }\n\n  if (cases.indexOf('other') > -1) {\n    return 'other';\n  }\n\n  throw new Error(`No plural message found for value \"${value}\"`);\n}\n/**\n * Returns the plural case based on the locale\n * \n * \\@experimental\n */\nexport class NgLocaleLocalization extends NgLocalization {\n/**\n * @param {?} locale\n */\nconstructor( protected locale: string) { super(); }\n/**\n * @param {?} value\n * @return {?}\n */\ngetPluralCategory(value: any): string {\n    const /** @type {?} */ plural = getPluralCase(this.locale, value);\n\n    switch (plural) {\n      case Plural.Zero:\n        return 'zero';\n      case Plural.One:\n        return 'one';\n      case Plural.Two:\n        return 'two';\n      case Plural.Few:\n        return 'few';\n      case Plural.Many:\n        return 'many';\n      default:\n        return 'other';\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction NgLocaleLocalization_tsickle_Closure_declarations() {\n/** @type {?} */\nNgLocaleLocalization.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgLocaleLocalization.ctorParameters;\n/** @type {?} */\nNgLocaleLocalization.prototype.locale;\n}\n\nexport type Plural = number;\nexport let Plural: any = {};\nPlural.Zero = 0;\nPlural.One = 1;\nPlural.Two = 2;\nPlural.Few = 3;\nPlural.Many = 4;\nPlural.Other = 5;\nPlural[Plural.Zero] = \"Zero\";\nPlural[Plural.One] = \"One\";\nPlural[Plural.Two] = \"Two\";\nPlural[Plural.Few] = \"Few\";\nPlural[Plural.Many] = \"Many\";\nPlural[Plural.Other] = \"Other\";\n\n/**\n * Returns the plural case based on the locale\n * \n * \\@experimental\n * @param {?} locale\n * @param {?} nLike\n * @return {?}\n */\nexport function getPluralCase(locale: string, nLike: number | string): Plural {\n  // TODO(vicb): lazy compute\n  if (typeof nLike === 'string') {\n    nLike = parseInt( /** @type {?} */((<string>nLike)), 10);\n  }\n  const /** @type {?} */ n: number = /** @type {?} */(( nLike as number));\n  const /** @type {?} */ nDecimal = n.toString().replace(/^[^.]*\\.?/, '');\n  const /** @type {?} */ i = Math.floor(Math.abs(n));\n  const /** @type {?} */ v = nDecimal.length;\n  const /** @type {?} */ f = parseInt(nDecimal, 10);\n  const /** @type {?} */ t = parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n\n  const /** @type {?} */ lang = locale.split('-')[0].toLowerCase();\n\n  switch (lang) {\n    case 'af':\n    case 'asa':\n    case 'az':\n    case 'bem':\n    case 'bez':\n    case 'bg':\n    case 'brx':\n    case 'ce':\n    case 'cgg':\n    case 'chr':\n    case 'ckb':\n    case 'ee':\n    case 'el':\n    case 'eo':\n    case 'es':\n    case 'eu':\n    case 'fo':\n    case 'fur':\n    case 'gsw':\n    case 'ha':\n    case 'haw':\n    case 'hu':\n    case 'jgo':\n    case 'jmc':\n    case 'ka':\n    case 'kk':\n    case 'kkj':\n    case 'kl':\n    case 'ks':\n    case 'ksb':\n    case 'ky':\n    case 'lb':\n    case 'lg':\n    case 'mas':\n    case 'mgo':\n    case 'ml':\n    case 'mn':\n    case 'nb':\n    case 'nd':\n    case 'ne':\n    case 'nn':\n    case 'nnh':\n    case 'nyn':\n    case 'om':\n    case 'or':\n    case 'os':\n    case 'ps':\n    case 'rm':\n    case 'rof':\n    case 'rwk':\n    case 'saq':\n    case 'seh':\n    case 'sn':\n    case 'so':\n    case 'sq':\n    case 'ta':\n    case 'te':\n    case 'teo':\n    case 'tk':\n    case 'tr':\n    case 'ug':\n    case 'uz':\n    case 'vo':\n    case 'vun':\n    case 'wae':\n    case 'xog':\n      if (n === 1) return Plural.One;\n      return Plural.Other;\n    case 'agq':\n    case 'bas':\n    case 'cu':\n    case 'dav':\n    case 'dje':\n    case 'dua':\n    case 'dyo':\n    case 'ebu':\n    case 'ewo':\n    case 'guz':\n    case 'kam':\n    case 'khq':\n    case 'ki':\n    case 'kln':\n    case 'kok':\n    case 'ksf':\n    case 'lrc':\n    case 'lu':\n    case 'luo':\n    case 'luy':\n    case 'mer':\n    case 'mfe':\n    case 'mgh':\n    case 'mua':\n    case 'mzn':\n    case 'nmg':\n    case 'nus':\n    case 'qu':\n    case 'rn':\n    case 'rw':\n    case 'sbp':\n    case 'twq':\n    case 'vai':\n    case 'yav':\n    case 'yue':\n    case 'zgh':\n    case 'ak':\n    case 'ln':\n    case 'mg':\n    case 'pa':\n    case 'ti':\n      if (n === Math.floor(n) && n >= 0 && n <= 1) return Plural.One;\n      return Plural.Other;\n    case 'am':\n    case 'as':\n    case 'bn':\n    case 'fa':\n    case 'gu':\n    case 'hi':\n    case 'kn':\n    case 'mr':\n    case 'zu':\n      if (i === 0 || n === 1) return Plural.One;\n      return Plural.Other;\n    case 'ar':\n      if (n === 0) return Plural.Zero;\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10) return Plural.Few;\n      if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99) return Plural.Many;\n      return Plural.Other;\n    case 'ast':\n    case 'ca':\n    case 'de':\n    case 'en':\n    case 'et':\n    case 'fi':\n    case 'fy':\n    case 'gl':\n    case 'it':\n    case 'nl':\n    case 'sv':\n    case 'sw':\n    case 'ur':\n    case 'yi':\n      if (i === 1 && v === 0) return Plural.One;\n      return Plural.Other;\n    case 'be':\n      if (n % 10 === 1 && !(n % 100 === 11)) return Plural.One;\n      if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&\n          !(n % 100 >= 12 && n % 100 <= 14))\n        return Plural.Few;\n      if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||\n          n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)\n        return Plural.Many;\n      return Plural.Other;\n    case 'br':\n      if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91)) return Plural.One;\n      if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92)) return Plural.Two;\n      if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&\n          !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||\n            n % 100 >= 90 && n % 100 <= 99))\n        return Plural.Few;\n      if (!(n === 0) && n % 1e6 === 0) return Plural.Many;\n      return Plural.Other;\n    case 'bs':\n    case 'hr':\n    case 'sr':\n      if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))\n        return Plural.One;\n      if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n              !(i % 100 >= 12 && i % 100 <= 14) ||\n          f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&\n              !(f % 100 >= 12 && f % 100 <= 14))\n        return Plural.Few;\n      return Plural.Other;\n    case 'cs':\n    case 'sk':\n      if (i === 1 && v === 0) return Plural.One;\n      if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0) return Plural.Few;\n      if (!(v === 0)) return Plural.Many;\n      return Plural.Other;\n    case 'cy':\n      if (n === 0) return Plural.Zero;\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      if (n === 3) return Plural.Few;\n      if (n === 6) return Plural.Many;\n      return Plural.Other;\n    case 'da':\n      if (n === 1 || !(t === 0) && (i === 0 || i === 1)) return Plural.One;\n      return Plural.Other;\n    case 'dsb':\n    case 'hsb':\n      if (v === 0 && i % 100 === 1 || f % 100 === 1) return Plural.One;\n      if (v === 0 && i % 100 === 2 || f % 100 === 2) return Plural.Two;\n      if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||\n          f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)\n        return Plural.Few;\n      return Plural.Other;\n    case 'ff':\n    case 'fr':\n    case 'hy':\n    case 'kab':\n      if (i === 0 || i === 1) return Plural.One;\n      return Plural.Other;\n    case 'fil':\n      if (v === 0 && (i === 1 || i === 2 || i === 3) ||\n          v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||\n          !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))\n        return Plural.One;\n      return Plural.Other;\n    case 'ga':\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      if (n === Math.floor(n) && n >= 3 && n <= 6) return Plural.Few;\n      if (n === Math.floor(n) && n >= 7 && n <= 10) return Plural.Many;\n      return Plural.Other;\n    case 'gd':\n      if (n === 1 || n === 11) return Plural.One;\n      if (n === 2 || n === 12) return Plural.Two;\n      if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19)) return Plural.Few;\n      return Plural.Other;\n    case 'gv':\n      if (v === 0 && i % 10 === 1) return Plural.One;\n      if (v === 0 && i % 10 === 2) return Plural.Two;\n      if (v === 0 &&\n          (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))\n        return Plural.Few;\n      if (!(v === 0)) return Plural.Many;\n      return Plural.Other;\n    case 'he':\n      if (i === 1 && v === 0) return Plural.One;\n      if (i === 2 && v === 0) return Plural.Two;\n      if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0) return Plural.Many;\n      return Plural.Other;\n    case 'is':\n      if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0)) return Plural.One;\n      return Plural.Other;\n    case 'ksh':\n      if (n === 0) return Plural.Zero;\n      if (n === 1) return Plural.One;\n      return Plural.Other;\n    case 'kw':\n    case 'naq':\n    case 'se':\n    case 'smn':\n      if (n === 1) return Plural.One;\n      if (n === 2) return Plural.Two;\n      return Plural.Other;\n    case 'lag':\n      if (n === 0) return Plural.Zero;\n      if ((i === 0 || i === 1) && !(n === 0)) return Plural.One;\n      return Plural.Other;\n    case 'lt':\n      if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19)) return Plural.One;\n      if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&\n          !(n % 100 >= 11 && n % 100 <= 19))\n        return Plural.Few;\n      if (!(f === 0)) return Plural.Many;\n      return Plural.Other;\n    case 'lv':\n    case 'prg':\n      if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||\n          v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)\n        return Plural.Zero;\n      if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||\n          !(v === 2) && f % 10 === 1)\n        return Plural.One;\n      return Plural.Other;\n    case 'mk':\n      if (v === 0 && i % 10 === 1 || f % 10 === 1) return Plural.One;\n      return Plural.Other;\n    case 'mt':\n      if (n === 1) return Plural.One;\n      if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)\n        return Plural.Few;\n      if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19) return Plural.Many;\n      return Plural.Other;\n    case 'pl':\n      if (i === 1 && v === 0) return Plural.One;\n      if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n          !(i % 100 >= 12 && i % 100 <= 14))\n        return Plural.Few;\n      if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||\n          v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n          v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)\n        return Plural.Many;\n      return Plural.Other;\n    case 'pt':\n      if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2)) return Plural.One;\n      return Plural.Other;\n    case 'ro':\n      if (i === 1 && v === 0) return Plural.One;\n      if (!(v === 0) || n === 0 ||\n          !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)\n        return Plural.Few;\n      return Plural.Other;\n    case 'ru':\n    case 'uk':\n      if (v === 0 && i % 10 === 1 && !(i % 100 === 11)) return Plural.One;\n      if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&\n          !(i % 100 >= 12 && i % 100 <= 14))\n        return Plural.Few;\n      if (v === 0 && i % 10 === 0 ||\n          v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||\n          v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)\n        return Plural.Many;\n      return Plural.Other;\n    case 'shi':\n      if (i === 0 || n === 1) return Plural.One;\n      if (n === Math.floor(n) && n >= 2 && n <= 10) return Plural.Few;\n      return Plural.Other;\n    case 'si':\n      if (n === 0 || n === 1 || i === 0 && f === 1) return Plural.One;\n      return Plural.Other;\n    case 'sl':\n      if (v === 0 && i % 100 === 1) return Plural.One;\n      if (v === 0 && i % 100 === 2) return Plural.Two;\n      if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))\n        return Plural.Few;\n      return Plural.Other;\n    case 'tzm':\n      if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)\n        return Plural.One;\n      return Plural.Other;\n    default:\n      return Plural.Other;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, DoCheck, ElementRef, Input, IterableChanges, IterableDiffer, IterableDiffers, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer, ɵisListLikeIterable as isListLikeIterable, ɵstringify as stringify} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Adds and removes CSS classes on an HTML element.\n * \n * \\@howToUse \n * ```\n *     <some-element [ngClass]=\"'first second'\">...</some-element>\n * \n *     <some-element [ngClass]=\"['first', 'second']\">...</some-element>\n * \n *     <some-element [ngClass]=\"{'first': true, 'second': true, 'third': false}\">...</some-element>\n * \n *     <some-element [ngClass]=\"stringExp|arrayExp|objExp\">...</some-element>\n * \n *     <some-element [ngClass]=\"{'class1 class2 class3' : true}\">...</some-element>\n * ```\n * \n * \\@description \n * \n * The CSS classes are updated as follows, depending on the type of the expression evaluation:\n * - `string` - the CSS classes listed in the string (space delimited) are added,\n * - `Array` - the CSS classes declared as Array elements are added,\n * - `Object` - keys are CSS classes that get added when the expression given in the value\n *              evaluates to a truthy value, otherwise they are removed.\n * \n * \\@stable\n */\nexport class NgClass implements DoCheck {\nprivate _iterableDiffer: IterableDiffer<string>|null;\nprivate _keyValueDiffer: KeyValueDiffer<string, any>|null;\nprivate _initialClasses: string[] = [];\nprivate _rawClass: string[]|Set<string>|{[klass: string]: any};\n/**\n * @param {?} _iterableDiffers\n * @param {?} _keyValueDiffers\n * @param {?} _ngEl\n * @param {?} _renderer\n */\nconstructor(\nprivate _iterableDiffers: IterableDiffers,\nprivate _keyValueDiffers: KeyValueDiffers,\nprivate _ngEl: ElementRef,\nprivate _renderer: Renderer) {}\n/**\n * @param {?} v\n * @return {?}\n */\nset klass(v: string) {\n    this._applyInitialClasses(true);\n    this._initialClasses = typeof v === 'string' ? v.split(/\\s+/) : [];\n    this._applyInitialClasses(false);\n    this._applyClasses(this._rawClass, false);\n  }\n/**\n * @param {?} v\n * @return {?}\n */\nset ngClass(v: string|string[]|Set<string>|{[klass: string]: any}) {\n    this._cleanupClasses(this._rawClass);\n\n    this._iterableDiffer = null;\n    this._keyValueDiffer = null;\n\n    this._rawClass = typeof v === 'string' ? v.split(/\\s+/) : v;\n\n    if (this._rawClass) {\n      if (isListLikeIterable(this._rawClass)) {\n        this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();\n      } else {\n        this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck(): void {\n    if (this._iterableDiffer) {\n      const /** @type {?} */ iterableChanges = this._iterableDiffer.diff( /** @type {?} */((this._rawClass as string[])));\n      if (iterableChanges) {\n        this._applyIterableChanges(iterableChanges);\n      }\n    } else if (this._keyValueDiffer) {\n      const /** @type {?} */ keyValueChanges = this._keyValueDiffer.diff( /** @type {?} */((this._rawClass as{[k: string]: any})));\n      if (keyValueChanges) {\n        this._applyKeyValueChanges(keyValueChanges);\n      }\n    }\n  }\n/**\n * @param {?} rawClassVal\n * @return {?}\n */\nprivate _cleanupClasses(rawClassVal: string[]|{[klass: string]: any}): void {\n    this._applyClasses(rawClassVal, true);\n    this._applyInitialClasses(false);\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _applyKeyValueChanges(changes: KeyValueChanges<string, any>): void {\n    changes.forEachAddedItem((record) => this._toggleClass(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._toggleClass(record.key, record.currentValue));\n    changes.forEachRemovedItem((record) => {\n      if (record.previousValue) {\n        this._toggleClass(record.key, false);\n      }\n    });\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _applyIterableChanges(changes: IterableChanges<string>): void {\n    changes.forEachAddedItem((record) => {\n      if (typeof record.item === 'string') {\n        this._toggleClass(record.item, true);\n      } else {\n        throw new Error(\n            `NgClass can only toggle CSS classes expressed as strings, got ${stringify(record.item)}`);\n      }\n    });\n\n    changes.forEachRemovedItem((record) => this._toggleClass(record.item, false));\n  }\n/**\n * @param {?} isCleanup\n * @return {?}\n */\nprivate _applyInitialClasses(isCleanup: boolean) {\n    this._initialClasses.forEach(klass => this._toggleClass(klass, !isCleanup));\n  }\n/**\n * @param {?} rawClassVal\n * @param {?} isCleanup\n * @return {?}\n */\nprivate _applyClasses(\n      rawClassVal: string[]|Set<string>|{[klass: string]: any}, isCleanup: boolean) {\n    if (rawClassVal) {\n      if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {\n        ( /** @type {?} */((<any>rawClassVal))).forEach((klass: string) => this._toggleClass(klass, !isCleanup));\n      } else {\n        Object.keys(rawClassVal).forEach(klass => {\n          if (rawClassVal[klass] != null) this._toggleClass(klass, !isCleanup);\n        });\n      }\n    }\n  }\n/**\n * @param {?} klass\n * @param {?} enabled\n * @return {?}\n */\nprivate _toggleClass(klass: string, enabled: any): void {\n    klass = klass.trim();\n    if (klass) {\n      klass.split(/\\s+/g).forEach(\n          klass => { this._renderer.setElementClass(this._ngEl.nativeElement, klass, !!enabled); });\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngClass]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: IterableDiffers, },\n{type: KeyValueDiffers, },\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'klass': [{ type: Input, args: ['class', ] },],\n'ngClass': [{ type: Input },],\n};\n}\n\nfunction NgClass_tsickle_Closure_declarations() {\n/** @type {?} */\nNgClass.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgClass.ctorParameters;\n/** @type {?} */\nNgClass.propDecorators;\n/** @type {?} */\nNgClass.prototype._iterableDiffer;\n/** @type {?} */\nNgClass.prototype._keyValueDiffer;\n/** @type {?} */\nNgClass.prototype._initialClasses;\n/** @type {?} */\nNgClass.prototype._rawClass;\n/** @type {?} */\nNgClass.prototype._iterableDiffers;\n/** @type {?} */\nNgClass.prototype._keyValueDiffers;\n/** @type {?} */\nNgClass.prototype._ngEl;\n/** @type {?} */\nNgClass.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport type NumberFormatStyle = number;\nexport let NumberFormatStyle: any = {};\nNumberFormatStyle.Decimal = 0;\nNumberFormatStyle.Percent = 1;\nNumberFormatStyle.Currency = 2;\nNumberFormatStyle[NumberFormatStyle.Decimal] = \"Decimal\";\nNumberFormatStyle[NumberFormatStyle.Percent] = \"Percent\";\nNumberFormatStyle[NumberFormatStyle.Currency] = \"Currency\";\n\nexport class NumberFormatter {\n/**\n * @param {?} num\n * @param {?} locale\n * @param {?} style\n * @param {?=} __3\n * @return {?}\n */\nstatic format(\n      num: number, locale: string, style: NumberFormatStyle,\n      {minimumIntegerDigits, minimumFractionDigits, maximumFractionDigits, currency,\n       currencyAsSymbol = false}: {\n        minimumIntegerDigits?: number,\n        minimumFractionDigits?: number,\n        maximumFractionDigits?: number,\n        currency?: string|null,\n        currencyAsSymbol?: boolean\n      } = {}): string {\n    const /** @type {?} */ options: Intl.NumberFormatOptions = {\n      minimumIntegerDigits,\n      minimumFractionDigits,\n      maximumFractionDigits,\n      style: NumberFormatStyle[style].toLowerCase()\n    };\n\n    if (style == NumberFormatStyle.Currency) {\n      options.currency = typeof currency == 'string' ? currency : undefined;\n      options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';\n    }\n    return new Intl.NumberFormat(locale, options).format(num);\n  }\n}\n\ntype DateFormatterFn = (date: Date, locale: string) => string;\n\nconst /** @type {?} */ DATE_FORMATS_SPLIT =\n    /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;\n\nconst /** @type {?} */ PATTERN_ALIASES: {[format: string]: DateFormatterFn} = {\n  // Keys are quoted so they do not get renamed during closure compilation.\n  'yMMMdjms': datePartGetterFactory(combine([\n    digitCondition('year', 1),\n    nameCondition('month', 3),\n    digitCondition('day', 1),\n    digitCondition('hour', 1),\n    digitCondition('minute', 1),\n    digitCondition('second', 1),\n  ])),\n  'yMdjm': datePartGetterFactory(combine([\n    digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),\n    digitCondition('hour', 1), digitCondition('minute', 1)\n  ])),\n  'yMMMMEEEEd': datePartGetterFactory(combine([\n    digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),\n    digitCondition('day', 1)\n  ])),\n  'yMMMMd': datePartGetterFactory(\n      combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),\n  'yMMMd': datePartGetterFactory(\n      combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),\n  'yMd': datePartGetterFactory(\n      combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),\n  'jms': datePartGetterFactory(combine(\n      [digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),\n  'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))\n};\n\nconst /** @type {?} */ DATE_FORMATS: {[format: string]: DateFormatterFn} = {\n  // Keys are quoted so they do not get renamed.\n  'yyyy': datePartGetterFactory(digitCondition('year', 4)),\n  'yy': datePartGetterFactory(digitCondition('year', 2)),\n  'y': datePartGetterFactory(digitCondition('year', 1)),\n  'MMMM': datePartGetterFactory(nameCondition('month', 4)),\n  'MMM': datePartGetterFactory(nameCondition('month', 3)),\n  'MM': datePartGetterFactory(digitCondition('month', 2)),\n  'M': datePartGetterFactory(digitCondition('month', 1)),\n  'LLLL': datePartGetterFactory(nameCondition('month', 4)),\n  'L': datePartGetterFactory(nameCondition('month', 1)),\n  'dd': datePartGetterFactory(digitCondition('day', 2)),\n  'd': datePartGetterFactory(digitCondition('day', 1)),\n  'HH': digitModifier(\n      hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),\n  'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),\n  'hh': digitModifier(\n      hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),\n  'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n  'jj': datePartGetterFactory(digitCondition('hour', 2)),\n  'j': datePartGetterFactory(digitCondition('hour', 1)),\n  'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),\n  'm': datePartGetterFactory(digitCondition('minute', 1)),\n  'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),\n  's': datePartGetterFactory(digitCondition('second', 1)),\n  // while ISO 8601 requires fractions to be prefixed with `.` or `,`\n  // we can be just safely rely on using `sss` since we currently don't support single or two digit\n  // fractions\n  'sss': datePartGetterFactory(digitCondition('second', 3)),\n  'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),\n  'EEE': datePartGetterFactory(nameCondition('weekday', 3)),\n  'EE': datePartGetterFactory(nameCondition('weekday', 2)),\n  'E': datePartGetterFactory(nameCondition('weekday', 1)),\n  'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),\n  'Z': timeZoneGetter('short'),\n  'z': timeZoneGetter('long'),\n  'ww': datePartGetterFactory({}),  // Week of year, padded (00-53). Week 01 is the week with the\n                                    // first Thursday of the year. not support ?\n  'w':\n      datePartGetterFactory({}),  // Week of year (0-53). Week 1 is the week with the first Thursday\n                                  // of the year not support ?\n  'G': datePartGetterFactory(nameCondition('era', 1)),\n  'GG': datePartGetterFactory(nameCondition('era', 2)),\n  'GGG': datePartGetterFactory(nameCondition('era', 3)),\n  'GGGG': datePartGetterFactory(nameCondition('era', 4))\n};\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction digitModifier(inner: DateFormatterFn): DateFormatterFn {\n  return function(date: Date, locale: string): string {\n    const /** @type {?} */ result = inner(date, locale);\n    return result.length == 1 ? '0' + result : result;\n  };\n}\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction hourClockExtractor(inner: DateFormatterFn): DateFormatterFn {\n  return function(date: Date, locale: string): string { return inner(date, locale).split(' ')[1]; };\n}\n/**\n * @param {?} inner\n * @return {?}\n */\nfunction hourExtractor(inner: DateFormatterFn): DateFormatterFn {\n  return function(date: Date, locale: string): string { return inner(date, locale).split(' ')[0]; };\n}\n/**\n * @param {?} date\n * @param {?} locale\n * @param {?} options\n * @return {?}\n */\nfunction intlDateFormat(date: Date, locale: string, options: Intl.DateTimeFormatOptions): string {\n  return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\\u200e\\u200f]/g, '');\n}\n/**\n * @param {?} timezone\n * @return {?}\n */\nfunction timeZoneGetter(timezone: string): DateFormatterFn {\n  // To workaround `Intl` API restriction for single timezone let format with 24 hours\n  const /** @type {?} */ options = {hour: '2-digit', hour12: false, timeZoneName: timezone};\n  return function(date: Date, locale: string): string {\n    const /** @type {?} */ result = intlDateFormat(date, locale, options);\n    // Then extract first 3 letters that related to hours\n    return result ? result.substring(3) : '';\n  };\n}\n/**\n * @param {?} options\n * @param {?} value\n * @return {?}\n */\nfunction hour12Modify(\n    options: Intl.DateTimeFormatOptions, value: boolean): Intl.DateTimeFormatOptions {\n  options.hour12 = value;\n  return options;\n}\n/**\n * @param {?} prop\n * @param {?} len\n * @return {?}\n */\nfunction digitCondition(prop: string, len: number): Intl.DateTimeFormatOptions {\n  const /** @type {?} */ result: {[k: string]: string} = {};\n  result[prop] = len === 2 ? '2-digit' : 'numeric';\n  return result;\n}\n/**\n * @param {?} prop\n * @param {?} len\n * @return {?}\n */\nfunction nameCondition(prop: string, len: number): Intl.DateTimeFormatOptions {\n  const /** @type {?} */ result: {[k: string]: string} = {};\n  if (len < 4) {\n    result[prop] = len > 1 ? 'short' : 'narrow';\n  } else {\n    result[prop] = 'long';\n  }\n\n  return result;\n}\n/**\n * @param {?} options\n * @return {?}\n */\nfunction combine(options: Intl.DateTimeFormatOptions[]): Intl.DateTimeFormatOptions {\n  return ( /** @type {?} */((<any>Object))).assign({}, ...options);\n}\n/**\n * @param {?} ret\n * @return {?}\n */\nfunction datePartGetterFactory(ret: Intl.DateTimeFormatOptions): DateFormatterFn {\n  return (date: Date, locale: string): string => intlDateFormat(date, locale, ret);\n}\n\nconst /** @type {?} */ DATE_FORMATTER_CACHE = new Map<string, string[]>();\n/**\n * @param {?} format\n * @param {?} date\n * @param {?} locale\n * @return {?}\n */\nfunction dateFormatter(format: string, date: Date, locale: string): string {\n  const /** @type {?} */ fn = PATTERN_ALIASES[format];\n\n  if (fn) return fn(date, locale);\n\n  const /** @type {?} */ cacheKey = format;\n  let /** @type {?} */ parts = DATE_FORMATTER_CACHE.get(cacheKey);\n\n  if (!parts) {\n    parts = [];\n    let /** @type {?} */ match: RegExpExecArray|null;\n    DATE_FORMATS_SPLIT.exec(format);\n\n    let /** @type {?} */ _format: string|null = format;\n    while (_format) {\n      match = DATE_FORMATS_SPLIT.exec(_format);\n      if (match) {\n        parts = parts.concat(match.slice(1));\n        _format = /** @type {?} */(( parts.pop()));\n      } else {\n        parts.push(_format);\n        _format = null;\n      }\n    }\n\n    DATE_FORMATTER_CACHE.set(cacheKey, parts);\n  }\n\n  return parts.reduce((text, part) => {\n    const /** @type {?} */ fn = DATE_FORMATS[part];\n    return text + (fn ? fn(date, locale) : partToTime(part));\n  }, '');\n}\n/**\n * @param {?} part\n * @return {?}\n */\nfunction partToTime(part: string): string {\n  return part === '\\'\\'' ? '\\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\\'');\n}\nexport class DateFormatter {\n/**\n * @param {?} date\n * @param {?} locale\n * @param {?} pattern\n * @return {?}\n */\nstatic format(date: Date, locale: string, pattern: string): string {\n    return dateFormatter(pattern, date, locale);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform, Type} from '@angular/core';\nimport {NumberFormatStyle, NumberFormatter} from './intl';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nconst /** @type {?} */ _NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\n/**\n * @param {?} pipe\n * @param {?} locale\n * @param {?} value\n * @param {?} style\n * @param {?=} digits\n * @param {?=} currency\n * @param {?=} currencyAsSymbol\n * @return {?}\n */\nfunction formatNumber(\n    pipe: Type<any>, locale: string, value: number | string, style: NumberFormatStyle,\n    digits?: string | null, currency: string | null = null,\n    currencyAsSymbol: boolean = false): string|null {\n  if (value == null) return null;\n\n  // Convert strings to numbers\n  value = typeof value === 'string' && isNumeric(value) ? +value : value;\n  if (typeof value !== 'number') {\n    throw invalidPipeArgumentError(pipe, value);\n  }\n\n  let /** @type {?} */ minInt: number|undefined = undefined;\n  let /** @type {?} */ minFraction: number|undefined = undefined;\n  let /** @type {?} */ maxFraction: number|undefined = undefined;\n  if (style !== NumberFormatStyle.Currency) {\n    // rely on Intl default for currency\n    minInt = 1;\n    minFraction = 0;\n    maxFraction = 3;\n  }\n\n  if (digits) {\n    const /** @type {?} */ parts = digits.match(_NUMBER_FORMAT_REGEXP);\n    if (parts === null) {\n      throw new Error(`${digits} is not a valid digit info for number pipes`);\n    }\n    if (parts[1] != null) {  // min integer digits\n      minInt = parseIntAutoRadix(parts[1]);\n    }\n    if (parts[3] != null) {  // min fraction digits\n      minFraction = parseIntAutoRadix(parts[3]);\n    }\n    if (parts[5] != null) {  // max fraction digits\n      maxFraction = parseIntAutoRadix(parts[5]);\n    }\n  }\n\n  return NumberFormatter.format( /** @type {?} */((value as number)), locale, style, {\n    minimumIntegerDigits: minInt,\n    minimumFractionDigits: minFraction,\n    maximumFractionDigits: maxFraction,\n    currency: currency,\n    currencyAsSymbol: currencyAsSymbol,\n  });\n}\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number according to locale rules.\n * \\@howToUse `number_expression | number[:digitInfo]`\n * \n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the active locale.\n * \n * where `expression` is a number:\n *  - `digitInfo` is a `string` which has a following format: <br>\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\n * \n * For more information on the acceptable range for each of these numbers and other\n * details see your native internationalization library.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See {\\@linkDocs guide/browser-support} for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}\n * \n * \\@stable\n */\nexport class DecimalPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, digits?: string): string|null {\n    return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'number'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DecimalPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDecimalPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDecimalPipe.ctorParameters;\n/** @type {?} */\nDecimalPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as a percentage according to locale rules.\n * \\@howToUse `number_expression | percent[:digitInfo]`\n * \n * \\@description \n * \n * Formats a number as percentage.\n * \n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See {\\@linkDocs guide/browser-support} for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='PercentPipe'}\n * \n * \\@stable\n */\nexport class PercentPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, digits?: string): string|null {\n    return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'percent'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction PercentPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nPercentPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPercentPipe.ctorParameters;\n/** @type {?} */\nPercentPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as currency using locale rules.\n * \\@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`\n * \\@description \n * \n * Use `currency` to format a number as currency.\n * \n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.\n *   - `true`: use symbol (e.g. `$`).\n *   - `false`(default): use code (e.g. `USD`).\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See {\\@linkDocs guide/browser-support} for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}\n * \n * \\@stable\n */\nexport class CurrencyPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} currencyCode\n * @param {?=} symbolDisplay\n * @param {?=} digits\n * @return {?}\n */\ntransform(\n      value: any, currencyCode: string = 'USD', symbolDisplay: boolean = false,\n      digits?: string): string|null {\n    return formatNumber(\n        CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode,\n        symbolDisplay);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'currency'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction CurrencyPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nCurrencyPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCurrencyPipe.ctorParameters;\n/** @type {?} */\nCurrencyPipe.prototype._locale;\n}\n\n/**\n * @param {?} text\n * @return {?}\n */\nfunction parseIntAutoRadix(text: string): number {\n  const /** @type {?} */ result: number = parseInt(text);\n  if (isNaN(result)) {\n    throw new Error('Invalid integer literal when parsing ' + text);\n  }\n  return result;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isNumeric(value: any): boolean {\n  return !isNaN(value - parseFloat(value));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform} from '@angular/core';\nimport {DateFormatter} from './intl';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\nimport {isNumeric} from './number_pipe';\n\nconst /** @type {?} */ ISO8601_DATE_REGEX =\n    /^(\\d{4})-?(\\d\\d)-?(\\d\\d)(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:\\.(\\d+))?)?)?(Z|([+-])(\\d\\d):?(\\d\\d))?)?$/;\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a date according to locale rules.\n * \\@howToUse `date_expression | date[:format]`\n * \\@description \n * \n * Where:\n * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string\n * (https://www.w3.org/TR/NOTE-datetime).\n * - `format` indicates which date/time components to include. The format can be predefined as\n *   shown below or custom as shown in the table.\n *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)\n *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)\n *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)\n *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)\n *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)\n *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)\n *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)\n *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)\n * \n * \n *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |\n *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|\n *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |\n *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |\n *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |\n *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |\n *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |\n *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |\n *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|\n *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |\n *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |\n *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |\n *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |\n *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |\n *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |\n * \n * In javascript, only the components specified will be respected (not the ordering,\n * punctuations, ...) and details of the formatting will be dependent on the locale.\n * \n * Timezone of the formatted text will be the local system timezone of the end-user's machine.\n * \n * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not\n * applied and the formatted text will have the same day, month and year of the expression.\n * \n * WARNINGS:\n * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.\n *   Instead users should treat the date as an immutable object and change the reference when the\n *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run\n *   which would be an expensive operation).\n * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera\n *   browsers.\n * \n * ### Examples\n * \n * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)\n * in the _local_ time and locale is 'en-US':\n * \n * ```\n *     {{ dateObj | date }}               // output is 'Jun 15, 2015'\n *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n *     {{ dateObj | date:'mmss' }}        // output is '43:11'\n * ```\n * \n * {\\@example common/pipes/ts/date_pipe.ts region='DatePipe'}\n * \n * \\@stable\n */\nexport class DatePipe implements PipeTransform {\n/**\n * \\@internal\n */\nstatic _ALIASES: {[key: string]: string} = {\n    'medium': 'yMMMdjms',\n    'short': 'yMdjm',\n    'fullDate': 'yMMMMEEEEd',\n    'longDate': 'yMMMMd',\n    'mediumDate': 'yMMMd',\n    'shortDate': 'yMd',\n    'mediumTime': 'jms',\n    'shortTime': 'jm'\n  };\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} pattern\n * @return {?}\n */\ntransform(value: any, pattern: string = 'mediumDate'): string|null {\n    let /** @type {?} */ date: Date;\n\n    if (isBlank(value) || value !== value) return null;\n\n    if (typeof value === 'string') {\n      value = value.trim();\n    }\n\n    if (isDate(value)) {\n      date = value;\n    } else if (isNumeric(value)) {\n      date = new Date(parseFloat(value));\n    } else if (typeof value === 'string' && /^(\\d{4}-\\d{1,2}-\\d{1,2})$/.test(value)) {\n      /**\n      * For ISO Strings without time the day, month and year must be extracted from the ISO String\n      * before Date creation to avoid time offset and errors in the new Date.\n      * If we only replace '-' with ',' in the ISO String (\"2015,01,01\"), and try to create a new\n      * date, some browsers (e.g. IE 9) will throw an invalid Date error\n      * If we leave the '-' (\"2015-01-01\") and try to create a new Date(\"2015-01-01\") the timeoffset\n      * is applied\n      * Note: ISO months are 0 for January, 1 for February, ...\n      */\n      const [y, m, d] = value.split('-').map((val: string) => parseInt(val, 10));\n      date = new Date(y, m - 1, d);\n    } else {\n      date = new Date(value);\n    }\n\n    if (!isDate(date)) {\n      let /** @type {?} */ match: RegExpMatchArray|null;\n      if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {\n        date = isoStringToDate(match);\n      } else {\n        throw invalidPipeArgumentError(DatePipe, value);\n      }\n    }\n\n    return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'date', pure: true}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DatePipe_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nDatePipe._ALIASES;\n/** @type {?} */\nDatePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDatePipe.ctorParameters;\n/** @type {?} */\nDatePipe.prototype._locale;\n}\n\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isBlank(obj: any): boolean {\n  return obj == null || obj === '';\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isDate(obj: any): obj is Date {\n  return obj instanceof Date && !isNaN(obj.valueOf());\n}\n/**\n * @param {?} match\n * @return {?}\n */\nfunction isoStringToDate(match: RegExpMatchArray): Date {\n  const /** @type {?} */ date = new Date(0);\n  let /** @type {?} */ tzHour = 0;\n  let /** @type {?} */ tzMin = 0;\n  const /** @type {?} */ dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;\n  const /** @type {?} */ timeSetter = match[8] ? date.setUTCHours : date.setHours;\n\n  if (match[9]) {\n    tzHour = toInt(match[9] + match[10]);\n    tzMin = toInt(match[9] + match[11]);\n  }\n  dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));\n  const /** @type {?} */ h = toInt(match[4] || '0') - tzHour;\n  const /** @type {?} */ m = toInt(match[5] || '0') - tzMin;\n  const /** @type {?} */ s = toInt(match[6] || '0');\n  const /** @type {?} */ ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);\n  timeSetter.call(date, h, m, s, ms);\n  return date;\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction toInt(str: string): number {\n  return parseInt(str, 10);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {\\@link Location}.\n * \n * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\n * agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms that angular supports. For example, `\\@angular/platform-browser` provides an\n * implementation specific to the browser environment, while `\\@angular/platform-webworker` provides\n * one suitable for use with web workers.\n * \n * The `PlatformLocation` class is used directly by all implementations of {\\@link LocationStrategy}\n * when they need to interact with the DOM apis like pushState, popState, etc...\n * \n * {\\@link LocationStrategy} in turn is used by the {\\@link Location} service which is used directly\n * by the {\\@link Router} in order to navigate between routes. Since all interactions between {\\@link\n * Router} /\n * {\\@link Location} / {\\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\n * class they are all platform independent.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class PlatformLocation {\n/**\n * @abstract\n * @return {?}\n */\ngetBaseHrefFromDOM() {}\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener) {}\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nonHashChange(fn: LocationChangeListener) {}\n/**\n * @abstract\n * @return {?}\n */\npathname() {}\n/**\n * @abstract\n * @return {?}\n */\nsearch() {}\n/**\n * @abstract\n * @return {?}\n */\nhash() {}\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\nreplaceState(state: any, title: string, url: string) {}\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\npushState(state: any, title: string, url: string) {}\n/**\n * @abstract\n * @return {?}\n */\nforward() {}\n/**\n * @abstract\n * @return {?}\n */\nback() {}\n}\n/**\n * \\@whatItDoes indicates when a location is initialized\n * \\@experimental\n */\nexport const LOCATION_INITIALIZED = new InjectionToken<Promise<any>>('Location Initialized');\n\n/**\n * A serializable version of the event from onPopState or onHashChange\n *\n * @experimental\n */\nexport interface LocationChangeEvent { type: string; }\n\n/**\n * @experimental\n */\nexport interface LocationChangeListener { (e: LocationChangeEvent): any; }\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\nimport {LocationChangeListener} from './platform_location';\n/**\n * `LocationStrategy` is responsible for representing and reading route state\n * from the browser's URL. Angular provides two strategies:\n * {\\@link HashLocationStrategy} and {\\@link PathLocationStrategy}.\n * \n * This is used under the hood of the {\\@link Location} service.\n * \n * Applications should use the {\\@link Router} or {\\@link Location} services to\n * interact with application route state.\n * \n * For instance, {\\@link HashLocationStrategy} produces URLs like\n * `http://example.com#/foo`, and {\\@link PathLocationStrategy} produces\n * `http://example.com/foo` as an equivalent URL.\n * \n * See these two classes for more.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class LocationStrategy {\n/**\n * @abstract\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash?: boolean) {}\n/**\n * @abstract\n * @param {?} internal\n * @return {?}\n */\nprepareExternalUrl(internal: string) {}\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\npushState(state: any, title: string, url: string, queryParams: string) {}\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\nreplaceState(state: any, title: string, url: string, queryParams: string) {}\n/**\n * @abstract\n * @return {?}\n */\nforward() {}\n/**\n * @abstract\n * @return {?}\n */\nback() {}\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener) {}\n/**\n * @abstract\n * @return {?}\n */\ngetBaseHref() {}\n}\n/**\n * The `APP_BASE_HREF` token represents the base href to be used with the\n * {\\@link PathLocationStrategy}.\n * \n * If you're using {\\@link PathLocationStrategy}, you must provide a provider to a string\n * representing the URL prefix that should be preserved when generating and recognizing\n * URLs.\n * \n * ### Example\n * \n * ```typescript\n * import {Component, NgModule} from '\\@angular/core';\n * import {APP_BASE_HREF} from '\\@angular/common';\n * \n * \\@NgModule({ \n *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]\n * })\n * class AppModule {}\n * ```\n * \n * \\@stable\n */\nexport const APP_BASE_HREF = new InjectionToken<string>('appBaseHref');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {EventEmitter, Injectable} from '@angular/core';\n\nimport {LocationStrategy} from './location_strategy';\n\n/** @experimental */\nexport interface PopStateEvent {\n  pop?: boolean;\n  type?: string;\n  url?: string;\n}\n/**\n * \\@whatItDoes `Location` is a service that applications can use to interact with a browser's URL.\n * \\@description \n * Depending on which {\\@link LocationStrategy} is used, `Location` will either persist\n * to the URL's path or the URL's hash segment.\n * \n * Note: it's better to use {\\@link Router#navigate} service to trigger route changes. Use\n * `Location` only if you need to interact with or create normalized URLs outside of\n * routing.\n * \n * `Location` is responsible for normalizing the URL against the application's base href.\n * A normalized URL is absolute from the URL host, includes the application's base href, and has no\n * trailing slash:\n * - `/my/app/user/123` is normalized\n * - `my/app/user/123` **is not** normalized\n * - `/my/app/user/123/` **is not** normalized\n * \n * ### Example\n * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\n * \\@stable\n */\nexport class Location {\n/**\n * \\@internal\n */\n_subject: EventEmitter<any> = new EventEmitter();\n/**\n * \\@internal\n */\n_baseHref: string;\n/**\n * \\@internal\n */\n_platformStrategy: LocationStrategy;\n/**\n * @param {?} platformStrategy\n */\nconstructor(platformStrategy: LocationStrategy) {\n    this._platformStrategy = platformStrategy;\n    const browserBaseHref = this._platformStrategy.getBaseHref();\n    this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));\n    this._platformStrategy.onPopState((ev) => {\n      this._subject.emit({\n        'url': this.path(true),\n        'pop': true,\n        'type': ev.type,\n      });\n    });\n  }\n/**\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash: boolean = false): string {\n    return this.normalize(this._platformStrategy.path(includeHash));\n  }\n/**\n * Normalizes the given path and compares to the current normalized path.\n * @param {?} path\n * @param {?=} query\n * @return {?}\n */\nisCurrentPathEqualTo(path: string, query: string = ''): boolean {\n    return this.path() == this.normalize(path + Location.normalizeQueryParams(query));\n  }\n/**\n * Given a string representing a URL, returns the normalized URL path without leading or\n * trailing slashes.\n * @param {?} url\n * @return {?}\n */\nnormalize(url: string): string {\n    return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));\n  }\n/**\n * Given a string representing a URL, returns the platform-specific external URL path.\n * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one\n * before normalizing. This method will also add a hash if `HashLocationStrategy` is\n * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.\n * @param {?} url\n * @return {?}\n */\nprepareExternalUrl(url: string): string {\n    if (url && url[0] !== '/') {\n      url = '/' + url;\n    }\n    return this._platformStrategy.prepareExternalUrl(url);\n  }\n/**\n * Changes the browsers URL to the normalized version of the given URL, and pushes a\n * new item onto the platform's history.\n * @param {?} path\n * @param {?=} query\n * @return {?}\n */\ngo(path: string, query: string = ''): void {\n    this._platformStrategy.pushState(null, '', path, query);\n  }\n/**\n * Changes the browsers URL to the normalized version of the given URL, and replaces\n * the top item on the platform's history stack.\n * @param {?} path\n * @param {?=} query\n * @return {?}\n */\nreplaceState(path: string, query: string = ''): void {\n    this._platformStrategy.replaceState(null, '', path, query);\n  }\n/**\n * Navigates forward in the platform's history.\n * @return {?}\n */\nforward(): void { this._platformStrategy.forward(); }\n/**\n * Navigates back in the platform's history.\n * @return {?}\n */\nback(): void { this._platformStrategy.back(); }\n/**\n * Subscribe to the platform's `popState` events.\n * @param {?} onNext\n * @param {?=} onThrow\n * @param {?=} onReturn\n * @return {?}\n */\nsubscribe(\n      onNext: (value: PopStateEvent) => void, onThrow?: ((exception: any) => void)|null,\n      onReturn?: (() => void)|null): Object {\n    return this._subject.subscribe({next: onNext, error: onThrow, complete: onReturn});\n  }\n/**\n * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as\n * is.\n * @param {?} params\n * @return {?}\n */\npublic static normalizeQueryParams(params: string): string {\n    return params && params[0] !== '?' ? '?' + params : params;\n  }\n/**\n * Given 2 parts of a url, join them with a slash if needed.\n * @param {?} start\n * @param {?} end\n * @return {?}\n */\npublic static joinWithSlash(start: string, end: string): string {\n    if (start.length == 0) {\n      return end;\n    }\n    if (end.length == 0) {\n      return start;\n    }\n    let /** @type {?} */ slashes = 0;\n    if (start.endsWith('/')) {\n      slashes++;\n    }\n    if (end.startsWith('/')) {\n      slashes++;\n    }\n    if (slashes == 2) {\n      return start + end.substring(1);\n    }\n    if (slashes == 1) {\n      return start + end;\n    }\n    return start + '/' + end;\n  }\n/**\n * If url has a trailing slash, remove it, otherwise return url as is.\n * @param {?} url\n * @return {?}\n */\npublic static stripTrailingSlash(url: string): string { return url.replace(/\\/$/, ''); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LocationStrategy, },\n];\n}\n\nfunction Location_tsickle_Closure_declarations() {\n/** @type {?} */\nLocation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocation.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nLocation.prototype._subject;\n/**\n * \\@internal\n * @type {?}\n */\nLocation.prototype._baseHref;\n/**\n * \\@internal\n * @type {?}\n */\nLocation.prototype._platformStrategy;\n}\n\n/**\n * @param {?} baseHref\n * @param {?} url\n * @return {?}\n */\nfunction _stripBaseHref(baseHref: string, url: string): string {\n  return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;\n}\n/**\n * @param {?} url\n * @return {?}\n */\nfunction _stripIndexHtml(url: string): string {\n  return url.replace(/\\/index.html$/, '');\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Optional} from '@angular/core';\n\n\nimport {Location} from './location';\nimport {APP_BASE_HREF, LocationStrategy} from './location_strategy';\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\n/**\n * \\@whatItDoes Use URL hash for storing application location data.\n * \\@description \n * `HashLocationStrategy` is a {\\@link LocationStrategy} used to configure the\n * {\\@link Location} service to represent its state in the\n * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)\n * of the browser's URL.\n * \n * For instance, if you call `location.go('/foo')`, the browser's URL will become\n * `example.com#/foo`.\n * \n * ### Example\n * \n * {\\@example common/location/ts/hash_location_component.ts region='LocationComponent'}\n * \n * \\@stable\n */\nexport class HashLocationStrategy extends LocationStrategy {\nprivate _baseHref: string = '';\n/**\n * @param {?} _platformLocation\n * @param {?=} _baseHref\n */\nconstructor(\nprivate _platformLocation: PlatformLocation,\n        _baseHref?: string) {\n    super();\n    if (_baseHref != null) {\n      this._baseHref = _baseHref;\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener): void {\n    this._platformLocation.onPopState(fn);\n    this._platformLocation.onHashChange(fn);\n  }\n/**\n * @return {?}\n */\ngetBaseHref(): string { return this._baseHref; }\n/**\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash: boolean = false): string {\n    // the hash value is always prefixed with a `#`\n    // and if it is empty then it will stay empty\n    let /** @type {?} */ path = this._platformLocation.hash;\n    if (path == null) path = '#';\n\n    return path.length > 0 ? path.substring(1) : path;\n  }\n/**\n * @param {?} internal\n * @return {?}\n */\nprepareExternalUrl(internal: string): string {\n    const /** @type {?} */ url = Location.joinWithSlash(this._baseHref, internal);\n    return url.length > 0 ? ('#' + url) : url;\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} path\n * @param {?} queryParams\n * @return {?}\n */\npushState(state: any, title: string, path: string, queryParams: string) {\n    let /** @type {?} */ url: string|null =\n        this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n    if (url.length == 0) {\n      url = this._platformLocation.pathname;\n    }\n    this._platformLocation.pushState(state, title, url);\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} path\n * @param {?} queryParams\n * @return {?}\n */\nreplaceState(state: any, title: string, path: string, queryParams: string) {\n    let /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));\n    if (url.length == 0) {\n      url = this._platformLocation.pathname;\n    }\n    this._platformLocation.replaceState(state, title, url);\n  }\n/**\n * @return {?}\n */\nforward(): void { this._platformLocation.forward(); }\n/**\n * @return {?}\n */\nback(): void { this._platformLocation.back(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: PlatformLocation, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF, ] }, ]},\n];\n}\n\nfunction HashLocationStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nHashLocationStrategy.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHashLocationStrategy.ctorParameters;\n/** @type {?} */\nHashLocationStrategy.prototype._baseHref;\n/** @type {?} */\nHashLocationStrategy.prototype._platformLocation;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Optional} from '@angular/core';\n\n\nimport {Location} from './location';\nimport {APP_BASE_HREF, LocationStrategy} from './location_strategy';\nimport {LocationChangeListener, PlatformLocation} from './platform_location';\n/**\n * \\@whatItDoes Use URL for storing application location data.\n * \\@description \n * `PathLocationStrategy` is a {\\@link LocationStrategy} used to configure the\n * {\\@link Location} service to represent its state in the\n * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the\n * browser's URL.\n * \n * If you're using `PathLocationStrategy`, you must provide a {\\@link APP_BASE_HREF}\n * or add a base element to the document. This URL prefix that will be preserved\n * when generating and recognizing URLs.\n * \n * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n * \n * Similarly, if you add `<base href='/my/app'/>` to the document and call\n * `location.go('/foo')`, the browser's URL will become\n * `example.com/my/app/foo`.\n * \n * ### Example\n * \n * {\\@example common/location/ts/path_location_component.ts region='LocationComponent'}\n * \n * \\@stable\n */\nexport class PathLocationStrategy extends LocationStrategy {\nprivate _baseHref: string;\n/**\n * @param {?} _platformLocation\n * @param {?=} href\n */\nconstructor(\nprivate _platformLocation: PlatformLocation,\n        href?: string) {\n    super();\n\n    if (href == null) {\n      href = this._platformLocation.getBaseHrefFromDOM();\n    }\n\n    if (href == null) {\n      throw new Error(\n          `No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.`);\n    }\n\n    this._baseHref = href;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener): void {\n    this._platformLocation.onPopState(fn);\n    this._platformLocation.onHashChange(fn);\n  }\n/**\n * @return {?}\n */\ngetBaseHref(): string { return this._baseHref; }\n/**\n * @param {?} internal\n * @return {?}\n */\nprepareExternalUrl(internal: string): string {\n    return Location.joinWithSlash(this._baseHref, internal);\n  }\n/**\n * @param {?=} includeHash\n * @return {?}\n */\npath(includeHash: boolean = false): string {\n    const /** @type {?} */ pathname = this._platformLocation.pathname +\n        Location.normalizeQueryParams(this._platformLocation.search);\n    const /** @type {?} */ hash = this._platformLocation.hash;\n    return hash && includeHash ? `${pathname}${hash}` : pathname;\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\npushState(state: any, title: string, url: string, queryParams: string) {\n    const /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n    this._platformLocation.pushState(state, title, externalUrl);\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @param {?} queryParams\n * @return {?}\n */\nreplaceState(state: any, title: string, url: string, queryParams: string) {\n    const /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));\n    this._platformLocation.replaceState(state, title, externalUrl);\n  }\n/**\n * @return {?}\n */\nforward(): void { this._platformLocation.forward(); }\n/**\n * @return {?}\n */\nback(): void { this._platformLocation.back(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: PlatformLocation, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF, ] }, ]},\n];\n}\n\nfunction PathLocationStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nPathLocationStrategy.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPathLocationStrategy.ctorParameters;\n/** @type {?} */\nPathLocationStrategy.prototype._baseHref;\n/** @type {?} */\nPathLocationStrategy.prototype._platformLocation;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {PlatformLocation,LOCATION_INITIALIZED,LocationChangeEvent,LocationChangeListener} from './platform_location';\nexport {LocationStrategy,APP_BASE_HREF} from './location_strategy';\nexport {HashLocationStrategy} from './hash_location_strategy';\nexport {PathLocationStrategy} from './path_location_strategy';\nexport {PopStateEvent,Location} from './location';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ComponentFactoryResolver, ComponentRef, Directive, Injector, Input, NgModuleFactory, NgModuleRef, OnChanges, OnDestroy, Provider, SimpleChanges, Type, ViewContainerRef} from '@angular/core';\n/**\n * Instantiates a single {\\@link Component} type and inserts its Host View into current View.\n * `NgComponentOutlet` provides a declarative approach for dynamic component creation.\n * \n * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and\n * any existing component will get destroyed.\n * \n * ### Fine tune control\n * \n * You can control the component creation process by using the following optional attributes:\n * \n * * `ngComponentOutletInjector`: Optional custom {\\@link Injector} that will be used as parent for\n * the Component. Defaults to the injector of the current view container.\n * \n * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content\n * section of the component, if exists.\n * \n * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other\n * module, then load a component from that module.\n * \n * ### Syntax\n * \n * Simple\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression\"></ng-container>\n * ```\n * \n * Customized injector/content\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   injector: injectorExpression;\n *                                   content: contentNodesExpression;\">\n * </ng-container>\n * ```\n * \n * Customized ngModuleFactory\n * ```\n * <ng-container *ngComponentOutlet=\"componentTypeExpression;\n *                                   ngModuleFactory: moduleFactory;\">\n * </ng-container>\n * ```\n * ## Example\n * \n * {\\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}\n * \n * A more complete example with additional options:\n * \n * {\\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}\n * A more complete example with ngModuleFactory:\n * \n * {\\@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}\n * \n * \\@experimental\n */\nexport class NgComponentOutlet implements OnChanges, OnDestroy {\n   ngComponentOutlet: Type<any>;\n   ngComponentOutletInjector: Injector;\n   ngComponentOutletContent: any[][];\n   ngComponentOutletNgModuleFactory: NgModuleFactory<any>;\nprivate _componentRef: ComponentRef<any>|null = null;\nprivate _moduleRef: NgModuleRef<any>|null = null;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {}\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    this._viewContainerRef.clear();\n    this._componentRef = null;\n\n    if (this.ngComponentOutlet) {\n      const /** @type {?} */ elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;\n\n      if (changes['ngComponentOutletNgModuleFactory']) {\n        if (this._moduleRef) this._moduleRef.destroy();\n\n        if (this.ngComponentOutletNgModuleFactory) {\n          const /** @type {?} */ parentModule = elInjector.get(NgModuleRef);\n          this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);\n        } else {\n          this._moduleRef = null;\n        }\n      }\n\n      const /** @type {?} */ componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :\n                                                         elInjector.get(ComponentFactoryResolver);\n\n      const /** @type {?} */ componentFactory =\n          componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);\n\n      this._componentRef = this._viewContainerRef.createComponent(\n          componentFactory, this._viewContainerRef.length, elInjector,\n          this.ngComponentOutletContent);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this._moduleRef) this._moduleRef.destroy();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngComponentOutlet]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngComponentOutlet': [{ type: Input },],\n'ngComponentOutletInjector': [{ type: Input },],\n'ngComponentOutletContent': [{ type: Input },],\n'ngComponentOutletNgModuleFactory': [{ type: Input },],\n};\n}\n\nfunction NgComponentOutlet_tsickle_Closure_declarations() {\n/** @type {?} */\nNgComponentOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgComponentOutlet.ctorParameters;\n/** @type {?} */\nNgComponentOutlet.propDecorators;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutlet;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutletInjector;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutletContent;\n/** @type {?} */\nNgComponentOutlet.prototype.ngComponentOutletNgModuleFactory;\n/** @type {?} */\nNgComponentOutlet.prototype._componentRef;\n/** @type {?} */\nNgComponentOutlet.prototype._moduleRef;\n/** @type {?} */\nNgComponentOutlet.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input, IterableChangeRecord, IterableChanges, IterableDiffer, IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef, TrackByFunction, ViewContainerRef, forwardRef, isDevMode} from '@angular/core';\n/**\n * \\@stable\n */\nexport class NgForOfContext<T> {\n/**\n * @param {?} $implicit\n * @param {?} ngForOf\n * @param {?} index\n * @param {?} count\n */\nconstructor(\npublic $implicit: T,\npublic ngForOf: NgIterable<T>,\npublic index: number,\npublic count: number) {}\n/**\n * @return {?}\n */\nget first(): boolean { return this.index === 0; }\n/**\n * @return {?}\n */\nget last(): boolean { return this.index === this.count - 1; }\n/**\n * @return {?}\n */\nget even(): boolean { return this.index % 2 === 0; }\n/**\n * @return {?}\n */\nget odd(): boolean { return !this.even; }\n}\n\nfunction NgForOfContext_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForOfContext.prototype.$implicit;\n/** @type {?} */\nNgForOfContext.prototype.ngForOf;\n/** @type {?} */\nNgForOfContext.prototype.index;\n/** @type {?} */\nNgForOfContext.prototype.count;\n}\n\n/**\n * The `NgForOf` directive instantiates a template once per item from an iterable. The context\n * for each instantiated template inherits from the outer context with the given loop variable\n * set to the current item from the iterable.\n * \n * ### Local Variables\n * \n * `NgForOf` provides several exported values that can be aliased to local variables:\n * \n * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).\n * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is\n * more complex then a property access, for example when using the async pipe (`userStreams |\n * async`).\n * - `index: number`: The index of the current item in the iterable.\n * - `first: boolean`: True when the item is the first item in the iterable.\n * - `last: boolean`: True when the item is the last item in the iterable.\n * - `even: boolean`: True when the item has an even index in the iterable.\n * - `odd: boolean`: True when the item has an odd index in the iterable.\n * \n * ```\n * <li *ngFor=\"let user of userObservable | async as users; index as i; first as isFirst\">\n *    {{i}}/{{users.length}}. {{user}} <span *ngIf=\"isFirst\">default</span>\n * </li>\n * ```\n * \n * ### Change Propagation\n * \n * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:\n * \n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n * * Otherwise, the DOM element for that item will remain the same.\n * \n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can\n * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state\n * such as user input.\n * \n * It is possible for the identities of elements in the iterator to change while the data does not.\n * This can happen, for example, if the iterator produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with\n * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted). This is an expensive operation and should\n * be avoided if possible.\n * \n * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.\n * `trackBy` takes a function which has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n * \n * ### Syntax\n * \n * - `<li *ngFor=\"let item of items; index as i; trackBy: trackByFn\">...</li>`\n * - `<li template=\"ngFor let item of items; index as i; trackBy: trackByFn\">...</li>`\n * \n * With `<ng-template>` element:\n * \n * ```\n * <ng-template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </ng-template>\n * ```\n * \n * ### Example\n * \n * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed\n * example.\n * \n * \\@stable\n */\nexport class NgForOf<T> implements DoCheck, OnChanges {\n   ngForOf: NgIterable<T>;\n/**\n * @param {?} fn\n * @return {?}\n */\nset ngForTrackBy(fn: TrackByFunction<T>) {\n    if (isDevMode() && fn != null && typeof fn !== 'function') {\n      // TODO(vicb): use a log service once there is a public one available\n      if ( /** @type {?} */((<any>console)) && /** @type {?} */(( <any>console.warn))) {\n        console.warn(\n            `trackBy must be a function, but received ${JSON.stringify(fn)}. ` +\n            `See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.`);\n      }\n    }\n    this._trackByFn = fn;\n  }\n/**\n * @return {?}\n */\nget ngForTrackBy(): TrackByFunction<T> { return this._trackByFn; }\nprivate _differ: IterableDiffer<T>|null = null;\nprivate _trackByFn: TrackByFunction<T>;\n/**\n * @param {?} _viewContainer\n * @param {?} _template\n * @param {?} _differs\n */\nconstructor(\nprivate _viewContainer: ViewContainerRef,\nprivate _template: TemplateRef<NgForOfContext<T>>,\nprivate _differs: IterableDiffers) {}\n/**\n * @param {?} value\n * @return {?}\n */\nset ngForTemplate(value: TemplateRef<NgForOfContext<T>>) {\n    // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1\n    // The current type is too restrictive; a template that just uses index, for example,\n    // should be acceptable.\n    if (value) {\n      this._template = value;\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('ngForOf' in changes) {\n      // React on ngForOf changes only once all inputs have been initialized\n      const /** @type {?} */ value = changes['ngForOf'].currentValue;\n      if (!this._differ && value) {\n        try {\n          this._differ = this._differs.find(value).create(this.ngForTrackBy);\n        } catch ( /** @type {?} */e) {\n          throw new Error(\n              `Cannot find a differ supporting object '${value}' of type '${getTypeNameForDebugging(value)}'. NgFor only supports binding to Iterables such as Arrays.`);\n        }\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck(): void {\n    if (this._differ) {\n      const /** @type {?} */ changes = this._differ.diff(this.ngForOf);\n      if (changes) this._applyChanges(changes);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _applyChanges(changes: IterableChanges<T>) {\n    const /** @type {?} */ insertTuples: RecordViewTuple<T>[] = [];\n    changes.forEachOperation(\n        (item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (item.previousIndex == null) {\n            const /** @type {?} */ view = this._viewContainer.createEmbeddedView(\n                this._template, new NgForOfContext<T>( /** @type {?} */((null)), this.ngForOf, -1, -1), currentIndex);\n            const /** @type {?} */ tuple = new RecordViewTuple<T>(item, view);\n            insertTuples.push(tuple);\n          } else if (currentIndex == null) {\n            this._viewContainer.remove(adjustedPreviousIndex);\n          } else {\n            const /** @type {?} */ view = /** @type {?} */(( this._viewContainer.get(adjustedPreviousIndex)));\n            this._viewContainer.move(view, currentIndex);\n            const /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */(( <EmbeddedViewRef<NgForOfContext<T>>>view)));\n            insertTuples.push(tuple);\n          }\n        });\n\n    for (let /** @type {?} */ i = 0; i < insertTuples.length; i++) {\n      this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n    }\n\n    for (let /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {\n      const /** @type {?} */ viewRef = /** @type {?} */(( <EmbeddedViewRef<NgForOfContext<T>>>this._viewContainer.get(i)));\n      viewRef.context.index = i;\n      viewRef.context.count = ilen;\n    }\n\n    changes.forEachIdentityChange((record: any) => {\n      const /** @type {?} */ viewRef = /** @type {?} */((\n          <EmbeddedViewRef<NgForOfContext<T>>>this._viewContainer.get(record.currentIndex)));\n      viewRef.context.$implicit = record.item;\n    });\n  }\n/**\n * @param {?} view\n * @param {?} record\n * @return {?}\n */\nprivate _perViewChange(\n      view: EmbeddedViewRef<NgForOfContext<T>>, record: IterableChangeRecord<any>) {\n    view.context.$implicit = record.item;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngFor][ngForOf]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: IterableDiffers, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngForOf': [{ type: Input },],\n'ngForTrackBy': [{ type: Input },],\n'ngForTemplate': [{ type: Input },],\n};\n}\n\nfunction NgForOf_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForOf.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgForOf.ctorParameters;\n/** @type {?} */\nNgForOf.propDecorators;\n/** @type {?} */\nNgForOf.prototype.ngForOf;\n/** @type {?} */\nNgForOf.prototype._differ;\n/** @type {?} */\nNgForOf.prototype._trackByFn;\n/** @type {?} */\nNgForOf.prototype._viewContainer;\n/** @type {?} */\nNgForOf.prototype._template;\n/** @type {?} */\nNgForOf.prototype._differs;\n}\n\nclass RecordViewTuple<T> {\n/**\n * @param {?} record\n * @param {?} view\n */\nconstructor(public record: any,\npublic view: EmbeddedViewRef<NgForOfContext<T>>) {}\n}\n\nfunction RecordViewTuple_tsickle_Closure_declarations() {\n/** @type {?} */\nRecordViewTuple.prototype.record;\n/** @type {?} */\nRecordViewTuple.prototype.view;\n}\n\n\n/**\n * @deprecated from v4.0.0 - Use NgForOf<any> instead.\n */\nexport type NgFor = NgForOf<any>;\n/**\n * @deprecated from v4.0.0 - Use NgForOf instead.\n */\nexport const NgFor = NgForOf;\n/**\n * @param {?} type\n * @return {?}\n */\nexport function getTypeNameForDebugging(type: any): string {\n  return type['name'] || typeof type;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n/**\n * Conditionally includes a template based on the value of an `expression`.\n * \n * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place\n * when expression is truthy or falsy respectively. Typically the:\n *  - `then` template is the inline template of `ngIf` unless bound to a different value.\n *  - `else` template is blank unless it is bound.\n * \n * ## Most common usage\n * \n * The most common usage of the `ngIf` directive is to conditionally show the inline template as\n * seen in this example:\n * {\\@example common/ngIf/ts/module.ts region='NgIfSimple'}\n * \n * ## Showing an alternative template using `else`\n * \n * If it is necessary to display a template when the `expression` is falsy use the `else` template\n * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.\n * The template can be defined anywhere in the component view but is typically placed right after\n * `ngIf` for readability.\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfElse'}\n * \n * ## Using non-inlined `then` template\n * \n * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using\n * a binding (just like `else`). Because `then` and `else` are bindings, the template references can\n * change at runtime as shown in this example.\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfThenElse'}\n * \n * ## Storing conditional result in a variable\n * \n * A common pattern is that we need to show a set of properties from the same object. If the\n * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against\n * dereferencing a `null` value. This is especially the case when waiting on async data such as\n * when using the `async` pipe as shown in folowing example:\n * \n * ```\n * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!\n * ```\n * \n * There are several inefficiencies in the above example:\n *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the\n *    example above.\n *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.\n *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.\n *  - We have to place the `async` pipe in parenthesis.\n * \n * A better way to do this is to use `ngIf` and store the result of the condition in a local\n * variable as shown in the the example below:\n * \n * {\\@example common/ngIf/ts/module.ts region='NgIfAs'}\n * \n * Notice that:\n *  - We use only one `async` pipe and hence only one subscription gets created.\n *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.\n *  - The local `user` can then be bound repeatedly in a more efficient way.\n *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only\n *    display the data if `userStream` returns a value.\n *  - We can display an alternative template while waiting for the data.\n * \n * ### Syntax\n * \n * Simple form:\n * - `<div *ngIf=\"condition\">...</div>`\n * - `<div template=\"ngIf condition\">...</div>`\n * - `<ng-template [ngIf]=\"condition\"><div>...</div></ng-template>`\n * \n * Form with an else block:\n * ```\n * <div *ngIf=\"condition; else elseBlock\">...</div>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n * \n * Form with a `then` and `else` block:\n * ```\n * <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n * <ng-template #thenBlock>...</ng-template>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n * \n * Form with storing the value locally:\n * ```\n * <div *ngIf=\"condition as value; else elseBlock\">{{value}}</div>\n * <ng-template #elseBlock>...</ng-template>\n * ```\n * \n * \\@stable\n */\nexport class NgIf {\nprivate _context: NgIfContext = new NgIfContext();\nprivate _thenTemplateRef: TemplateRef<NgIfContext>|null = null;\nprivate _elseTemplateRef: TemplateRef<NgIfContext>|null = null;\nprivate _thenViewRef: EmbeddedViewRef<NgIfContext>|null = null;\nprivate _elseViewRef: EmbeddedViewRef<NgIfContext>|null = null;\n/**\n * @param {?} _viewContainer\n * @param {?} templateRef\n */\nconstructor(private _viewContainer: ViewContainerRef, templateRef: TemplateRef<NgIfContext>) {\n    this._thenTemplateRef = templateRef;\n  }\n/**\n * @param {?} condition\n * @return {?}\n */\nset ngIf(condition: any) {\n    this._context.$implicit = this._context.ngIf = condition;\n    this._updateView();\n  }\n/**\n * @param {?} templateRef\n * @return {?}\n */\nset ngIfThen(templateRef: TemplateRef<NgIfContext>) {\n    this._thenTemplateRef = templateRef;\n    this._thenViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n/**\n * @param {?} templateRef\n * @return {?}\n */\nset ngIfElse(templateRef: TemplateRef<NgIfContext>) {\n    this._elseTemplateRef = templateRef;\n    this._elseViewRef = null;  // clear previous view if any.\n    this._updateView();\n  }\n/**\n * @return {?}\n */\nprivate _updateView() {\n    if (this._context.$implicit) {\n      if (!this._thenViewRef) {\n        this._viewContainer.clear();\n        this._elseViewRef = null;\n        if (this._thenTemplateRef) {\n          this._thenViewRef =\n              this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n        }\n      }\n    } else {\n      if (!this._elseViewRef) {\n        this._viewContainer.clear();\n        this._thenViewRef = null;\n        if (this._elseTemplateRef) {\n          this._elseViewRef =\n              this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);\n        }\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngIf]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngIf': [{ type: Input },],\n'ngIfThen': [{ type: Input },],\n'ngIfElse': [{ type: Input },],\n};\n}\n\nfunction NgIf_tsickle_Closure_declarations() {\n/** @type {?} */\nNgIf.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgIf.ctorParameters;\n/** @type {?} */\nNgIf.propDecorators;\n/** @type {?} */\nNgIf.prototype._context;\n/** @type {?} */\nNgIf.prototype._thenTemplateRef;\n/** @type {?} */\nNgIf.prototype._elseTemplateRef;\n/** @type {?} */\nNgIf.prototype._thenViewRef;\n/** @type {?} */\nNgIf.prototype._elseViewRef;\n/** @type {?} */\nNgIf.prototype._viewContainer;\n}\n\n/**\n * \\@stable\n */\nexport class NgIfContext {\npublic $implicit: any = null;\npublic ngIf: any = null;\n}\n\nfunction NgIfContext_tsickle_Closure_declarations() {\n/** @type {?} */\nNgIfContext.prototype.$implicit;\n/** @type {?} */\nNgIfContext.prototype.ngIf;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, DoCheck, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\nexport class SwitchView {\nprivate _created = false;\n/**\n * @param {?} _viewContainerRef\n * @param {?} _templateRef\n */\nconstructor(\nprivate _viewContainerRef: ViewContainerRef,\nprivate _templateRef: TemplateRef<Object>) {}\n/**\n * @return {?}\n */\ncreate(): void {\n    this._created = true;\n    this._viewContainerRef.createEmbeddedView(this._templateRef);\n  }\n/**\n * @return {?}\n */\ndestroy(): void {\n    this._created = false;\n    this._viewContainerRef.clear();\n  }\n/**\n * @param {?} created\n * @return {?}\n */\nenforceState(created: boolean) {\n    if (created && !this._created) {\n      this.create();\n    } else if (!created && this._created) {\n      this.destroy();\n    }\n  }\n}\n\nfunction SwitchView_tsickle_Closure_declarations() {\n/** @type {?} */\nSwitchView.prototype._created;\n/** @type {?} */\nSwitchView.prototype._viewContainerRef;\n/** @type {?} */\nSwitchView.prototype._templateRef;\n}\n\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch\n *             expression.\n * \n * \\@howToUse \n * ```\n *     <container-element [ngSwitch]=\"switch_expression\">\n *       <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *       <some-element *ngSwitchCase=\"match_expression_2\">...</some-element>\n *       <some-other-element *ngSwitchCase=\"match_expression_3\">...</some-other-element>\n *       <ng-container *ngSwitchCase=\"match_expression_3\">\n *         <!-- use a ng-container to group multiple root nodes -->\n *         <inner-element></inner-element>\n *         <inner-other-element></inner-other-element>\n *       </ng-container>\n *       <some-element *ngSwitchDefault>...</some-element>\n *     </container-element>\n * ```\n * \\@description \n * \n * `NgSwitch` stamps out nested views when their match expression value matches the value of the\n * switch expression.\n * \n * In other words:\n * - you define a container element (where you place the directive with a switch expression on the\n * `[ngSwitch]=\"...\"` attribute)\n * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view\n * root elements.\n * \n * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will\n * be preserved at the location.\n * \n * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the\n * expression is evaluated.\n * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is\n * stamped out.\n * \n * \\@stable\n */\nexport class NgSwitch {\nprivate _defaultViews: SwitchView[];\nprivate _defaultUsed = false;\nprivate _caseCount = 0;\nprivate _lastCaseCheckIndex = 0;\nprivate _lastCasesMatched = false;\nprivate _ngSwitch: any;\n/**\n * @param {?} newValue\n * @return {?}\n */\nset ngSwitch(newValue: any) {\n    this._ngSwitch = newValue;\n    if (this._caseCount === 0) {\n      this._updateDefaultCases(true);\n    }\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_addCase(): number { return this._caseCount++; }\n/**\n * \\@internal\n * @param {?} view\n * @return {?}\n */\n_addDefault(view: SwitchView) {\n    if (!this._defaultViews) {\n      this._defaultViews = [];\n    }\n    this._defaultViews.push(view);\n  }\n/**\n * \\@internal\n * @param {?} value\n * @return {?}\n */\n_matchCase(value: any): boolean {\n    const /** @type {?} */ matched = value == this._ngSwitch;\n    this._lastCasesMatched = this._lastCasesMatched || matched;\n    this._lastCaseCheckIndex++;\n    if (this._lastCaseCheckIndex === this._caseCount) {\n      this._updateDefaultCases(!this._lastCasesMatched);\n      this._lastCaseCheckIndex = 0;\n      this._lastCasesMatched = false;\n    }\n    return matched;\n  }\n/**\n * @param {?} useDefault\n * @return {?}\n */\nprivate _updateDefaultCases(useDefault: boolean) {\n    if (this._defaultViews && useDefault !== this._defaultUsed) {\n      this._defaultUsed = useDefault;\n      for (let /** @type {?} */ i = 0; i < this._defaultViews.length; i++) {\n        const /** @type {?} */ defaultView = this._defaultViews[i];\n        defaultView.enforceState(useDefault);\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngSwitch]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngSwitch': [{ type: Input },],\n};\n}\n\nfunction NgSwitch_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSwitch.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSwitch.ctorParameters;\n/** @type {?} */\nNgSwitch.propDecorators;\n/** @type {?} */\nNgSwitch.prototype._defaultViews;\n/** @type {?} */\nNgSwitch.prototype._defaultUsed;\n/** @type {?} */\nNgSwitch.prototype._caseCount;\n/** @type {?} */\nNgSwitch.prototype._lastCaseCheckIndex;\n/** @type {?} */\nNgSwitch.prototype._lastCasesMatched;\n/** @type {?} */\nNgSwitch.prototype._ngSwitch;\n}\n\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Creates a view that will be added/removed from the parent {\\@link NgSwitch} when the\n *             given expression evaluate to respectively the same/different value as the switch\n *             expression.\n * \n * \\@howToUse \n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n * </container-element>\n * ```\n * \\@description \n * \n * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch\n * expression.\n * \n * If multiple match expressions match the switch expression value, all of them are displayed.\n * \n * See {\\@link NgSwitch} for more details and example.\n * \n * \\@stable\n */\nexport class NgSwitchCase implements DoCheck {\nprivate _view: SwitchView;\n\n  \n  ngSwitchCase: any;\n/**\n * @param {?} viewContainer\n * @param {?} templateRef\n * @param {?} ngSwitch\n */\nconstructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\nprivate ngSwitch: NgSwitch) {\n    ngSwitch._addCase();\n    this._view = new SwitchView(viewContainer, templateRef);\n  }\n/**\n * @return {?}\n */\nngDoCheck() { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngSwitchCase]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: NgSwitch, decorators: [{ type: Host }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngSwitchCase': [{ type: Input },],\n};\n}\n\nfunction NgSwitchCase_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSwitchCase.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSwitchCase.ctorParameters;\n/** @type {?} */\nNgSwitchCase.propDecorators;\n/** @type {?} */\nNgSwitchCase.prototype._view;\n/** @type {?} */\nNgSwitchCase.prototype.ngSwitchCase;\n/** @type {?} */\nNgSwitchCase.prototype.ngSwitch;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Creates a view that is added to the parent {\\@link NgSwitch} when no case expressions\n * match the\n *             switch expression.\n * \n * \\@howToUse \n * ```\n * <container-element [ngSwitch]=\"switch_expression\">\n *   <some-element *ngSwitchCase=\"match_expression_1\">...</some-element>\n *   <some-other-element *ngSwitchDefault>...</some-other-element>\n * </container-element>\n * ```\n * \n * \\@description \n * \n * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch\n * expression.\n * \n * See {\\@link NgSwitch} for more details and example.\n * \n * \\@stable\n */\nexport class NgSwitchDefault {\n/**\n * @param {?} viewContainer\n * @param {?} templateRef\n * @param {?} ngSwitch\n */\nconstructor(\n      viewContainer: ViewContainerRef, templateRef: TemplateRef<Object>,\n       ngSwitch: NgSwitch) {\n    ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngSwitchDefault]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: NgSwitch, decorators: [{ type: Host }, ]},\n];\n}\n\nfunction NgSwitchDefault_tsickle_Closure_declarations() {\n/** @type {?} */\nNgSwitchDefault.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgSwitchDefault.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Attribute, Directive, Host, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\nimport {NgLocalization, getPluralCategory} from '../localization';\n\nimport {SwitchView} from './ng_switch';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.\n * \n * \\@howToUse \n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">there is nothing</ng-template>\n *   <ng-template ngPluralCase=\"=1\">there is one</ng-template>\n *   <ng-template ngPluralCase=\"few\">there are a few</ng-template>\n * </some-element>\n * ```\n * \n * \\@description \n * \n * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees\n * that match the switch expression's pluralization category.\n * \n * To use this directive you must provide a container element that sets the `[ngPlural]` attribute\n * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their\n * expression:\n * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value\n *   matches the switch expression exactly,\n * - otherwise, the view will be treated as a \"category match\", and will only display if exact\n *   value matches aren't found and the value maps to its category for the defined locale.\n * \n * See http://cldr.unicode.org/index/cldr-spec/plural-rules\n * \n * \\@experimental\n */\nexport class NgPlural {\nprivate _switchValue: number;\nprivate _activeView: SwitchView;\nprivate _caseViews: {[k: string]: SwitchView} = {};\n/**\n * @param {?} _localization\n */\nconstructor(private _localization: NgLocalization) {}\n/**\n * @param {?} value\n * @return {?}\n */\nset ngPlural(value: number) {\n    this._switchValue = value;\n    this._updateView();\n  }\n/**\n * @param {?} value\n * @param {?} switchView\n * @return {?}\n */\naddCase(value: string, switchView: SwitchView): void { this._caseViews[value] = switchView; }\n/**\n * @return {?}\n */\nprivate _updateView(): void {\n    this._clearViews();\n\n    const /** @type {?} */ cases = Object.keys(this._caseViews);\n    const /** @type {?} */ key = getPluralCategory(this._switchValue, cases, this._localization);\n    this._activateView(this._caseViews[key]);\n  }\n/**\n * @return {?}\n */\nprivate _clearViews() {\n    if (this._activeView) this._activeView.destroy();\n  }\n/**\n * @param {?} view\n * @return {?}\n */\nprivate _activateView(view: SwitchView) {\n    if (view) {\n      this._activeView = view;\n      this._activeView.create();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngPlural]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgLocalization, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngPlural': [{ type: Input },],\n};\n}\n\nfunction NgPlural_tsickle_Closure_declarations() {\n/** @type {?} */\nNgPlural.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgPlural.ctorParameters;\n/** @type {?} */\nNgPlural.propDecorators;\n/** @type {?} */\nNgPlural.prototype._switchValue;\n/** @type {?} */\nNgPlural.prototype._activeView;\n/** @type {?} */\nNgPlural.prototype._caseViews;\n/** @type {?} */\nNgPlural.prototype._localization;\n}\n\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Creates a view that will be added/removed from the parent {\\@link NgPlural} when the\n *             given expression matches the plural expression according to CLDR rules.\n * \n * \\@howToUse \n * ```\n * <some-element [ngPlural]=\"value\">\n *   <ng-template ngPluralCase=\"=0\">...</ng-template>\n *   <ng-template ngPluralCase=\"other\">...</ng-template>\n * </some-element>\n * ```\n * \n * See {\\@link NgPlural} for more details and example.\n * \n * \\@experimental\n */\nexport class NgPluralCase {\n/**\n * @param {?} value\n * @param {?} template\n * @param {?} viewContainer\n * @param {?} ngPlural\n */\nconstructor(\npublic value: string, template: TemplateRef<Object>,\n      viewContainer: ViewContainerRef,  ngPlural: NgPlural) {\n    const isANumber: boolean = !isNaN(Number(value));\n    ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngPluralCase]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Attribute, args: ['ngPluralCase', ] }, ]},\n{type: TemplateRef, },\n{type: ViewContainerRef, },\n{type: NgPlural, decorators: [{ type: Host }, ]},\n];\n}\n\nfunction NgPluralCase_tsickle_Closure_declarations() {\n/** @type {?} */\nNgPluralCase.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgPluralCase.ctorParameters;\n/** @type {?} */\nNgPluralCase.prototype.value;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, DoCheck, ElementRef, Input, KeyValueChanges, KeyValueDiffer, KeyValueDiffers, Renderer} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Update an HTML element styles.\n * \n * \\@howToUse \n * ```\n * <some-element [ngStyle]=\"{'font-style': styleExp}\">...</some-element>\n * \n * <some-element [ngStyle]=\"{'max-width.px': widthExp}\">...</some-element>\n * \n * <some-element [ngStyle]=\"objExp\">...</some-element>\n * ```\n * \n * \\@description \n * \n * The styles are updated according to the value of the expression evaluation:\n * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),\n * - values are the values assigned to those properties (expressed in the given unit).\n * \n * \\@stable\n */\nexport class NgStyle implements DoCheck {\nprivate _ngStyle: {[key: string]: string};\nprivate _differ: KeyValueDiffer<string, string|number>;\n/**\n * @param {?} _differs\n * @param {?} _ngEl\n * @param {?} _renderer\n */\nconstructor(\nprivate _differs: KeyValueDiffers,\nprivate _ngEl: ElementRef,\nprivate _renderer: Renderer) {}\n/**\n * @param {?} v\n * @return {?}\n */\nset ngStyle(v: {[key: string]: string}) {\n    this._ngStyle = v;\n    if (!this._differ && v) {\n      this._differ = this._differs.find(v).create();\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\n    if (this._differ) {\n      const /** @type {?} */ changes = this._differ.diff(this._ngStyle);\n      if (changes) {\n        this._applyChanges(changes);\n      }\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _applyChanges(changes: KeyValueChanges<string, string|number>): void {\n    changes.forEachRemovedItem((record) => this._setStyle(record.key, null));\n    changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));\n    changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));\n  }\n/**\n * @param {?} nameAndUnit\n * @param {?} value\n * @return {?}\n */\nprivate _setStyle(nameAndUnit: string, value: string|number|null|undefined): void {\n    const [name, unit] = nameAndUnit.split('.');\n    value = value != null && unit ? `${value}${unit}` : value;\n\n    this._renderer.setElementStyle(this._ngEl.nativeElement, name, /** @type {?} */(( value as string)));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngStyle]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: KeyValueDiffers, },\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngStyle': [{ type: Input },],\n};\n}\n\nfunction NgStyle_tsickle_Closure_declarations() {\n/** @type {?} */\nNgStyle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgStyle.ctorParameters;\n/** @type {?} */\nNgStyle.propDecorators;\n/** @type {?} */\nNgStyle.prototype._ngStyle;\n/** @type {?} */\nNgStyle.prototype._differ;\n/** @type {?} */\nNgStyle.prototype._differs;\n/** @type {?} */\nNgStyle.prototype._ngEl;\n/** @type {?} */\nNgStyle.prototype._renderer;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, EmbeddedViewRef, Input, OnChanges, SimpleChanges, TemplateRef, ViewContainerRef} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \n * \\@whatItDoes Inserts an embedded view from a prepared `TemplateRef`\n * \n * \\@howToUse \n * ```\n * <ng-container *ngTemplateOutlet=\"templateRefExp; context: contextExp\"></ng-container>\n * ```\n * \n * \\@description \n * \n * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.\n * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding\n * by the local template `let` declarations.\n * \n * Note: using the key `$implicit` in the context object will set it's value as default.\n * \n * ## Example\n * \n * {\\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}\n * \n * \\@experimental\n */\nexport class NgTemplateOutlet implements OnChanges {\nprivate _viewRef: EmbeddedViewRef<any>;\npublic ngTemplateOutletContext: Object;\npublic ngTemplateOutlet: TemplateRef<any>;\n/**\n * @param {?} _viewContainerRef\n */\nconstructor(private _viewContainerRef: ViewContainerRef) {}\n/**\n * @deprecated v4.0.0 - Renamed to ngTemplateOutletContext.\n * @param {?} context\n * @return {?}\n */\nset ngOutletContext(context: Object) { this.ngTemplateOutletContext = context; }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    if (this._viewRef) {\n      this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));\n    }\n\n    if (this.ngTemplateOutlet) {\n      this._viewRef = this._viewContainerRef.createEmbeddedView(\n          this.ngTemplateOutlet, this.ngTemplateOutletContext);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngTemplateOutlet]'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngTemplateOutletContext': [{ type: Input },],\n'ngTemplateOutlet': [{ type: Input },],\n'ngOutletContext': [{ type: Input },],\n};\n}\n\nfunction NgTemplateOutlet_tsickle_Closure_declarations() {\n/** @type {?} */\nNgTemplateOutlet.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgTemplateOutlet.ctorParameters;\n/** @type {?} */\nNgTemplateOutlet.propDecorators;\n/** @type {?} */\nNgTemplateOutlet.prototype._viewRef;\n/** @type {?} */\nNgTemplateOutlet.prototype.ngTemplateOutletContext;\n/** @type {?} */\nNgTemplateOutlet.prototype.ngTemplateOutlet;\n/** @type {?} */\nNgTemplateOutlet.prototype._viewContainerRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Provider} from '@angular/core';\n\nimport {NgClass} from './ng_class';\nimport {NgComponentOutlet} from './ng_component_outlet';\nimport {NgFor, NgForOf, NgForOfContext} from './ng_for_of';\nimport {NgIf, NgIfContext} from './ng_if';\nimport {NgPlural, NgPluralCase} from './ng_plural';\nimport {NgStyle} from './ng_style';\nimport {NgSwitch, NgSwitchCase, NgSwitchDefault} from './ng_switch';\nimport {NgTemplateOutlet} from './ng_template_outlet';\n\nexport {\n  NgClass,\n  NgComponentOutlet,\n  NgFor,\n  NgForOf,\n  NgForOfContext,\n  NgIf,\n  NgIfContext,\n  NgPlural,\n  NgPluralCase,\n  NgStyle,\n  NgSwitch,\n  NgSwitchCase,\n  NgSwitchDefault,\n  NgTemplateOutlet\n};\n\n\n\n/**\n * A collection of Angular directives that are likely to be used in each and every Angular\n * application.\n */\nexport const /** @type {?} */ COMMON_DIRECTIVES: Provider[] = [\n  NgClass,\n  NgComponentOutlet,\n  NgForOf,\n  NgIf,\n  NgTemplateOutlet,\n  NgStyle,\n  NgSwitch,\n  NgSwitchCase,\n  NgSwitchDefault,\n  NgPlural,\n  NgPluralCase,\n];\n\n/**\n * A collection of deprecated directives that are no longer part of the core module.\n */\nexport const /** @type {?} */ COMMON_DEPRECATED_DIRECTIVES: Provider[] = [NgFor];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectorRef, EventEmitter, OnDestroy, Pipe, PipeTransform, WrappedValue, ɵisObservable, ɵisPromise} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {ISubscription} from 'rxjs/Subscription';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\ninterface SubscriptionStrategy {\n  createSubscription(async: Observable<any>|Promise<any>, updateLatestValue: any): ISubscription\n      |Promise<any>;\n  dispose(subscription: ISubscription|Promise<any>): void;\n  onDestroy(subscription: ISubscription|Promise<any>): void;\n}\nclass ObservableStrategy implements SubscriptionStrategy {\n/**\n * @param {?} async\n * @param {?} updateLatestValue\n * @return {?}\n */\ncreateSubscription(async: Observable<any>, updateLatestValue: any): ISubscription {\n    return async.subscribe({next: updateLatestValue, error: (e: any) => { throw e; }});\n  }\n/**\n * @param {?} subscription\n * @return {?}\n */\ndispose(subscription: ISubscription): void { subscription.unsubscribe(); }\n/**\n * @param {?} subscription\n * @return {?}\n */\nonDestroy(subscription: ISubscription): void { subscription.unsubscribe(); }\n}\nclass PromiseStrategy implements SubscriptionStrategy {\n/**\n * @param {?} async\n * @param {?} updateLatestValue\n * @return {?}\n */\ncreateSubscription(async: Promise<any>, updateLatestValue: (v: any) => any): Promise<any> {\n    return async.then(updateLatestValue, e => { throw e; });\n  }\n/**\n * @param {?} subscription\n * @return {?}\n */\ndispose(subscription: Promise<any>): void {}\n/**\n * @param {?} subscription\n * @return {?}\n */\nonDestroy(subscription: Promise<any>): void {}\n}\n\nconst /** @type {?} */ _promiseStrategy = new PromiseStrategy();\nconst /** @type {?} */ _observableStrategy = new ObservableStrategy();\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Unwraps a value from an asynchronous primitive.\n * \\@howToUse `observable_or_promise_expression | async`\n * \\@description \n * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for\n * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid\n * potential memory leaks.\n * \n * \n * ## Examples\n * \n * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the\n * promise.\n * \n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}\n * \n * It's also possible to use `async` with Observables. The example below binds the `time` Observable\n * to the view. The Observable continuously updates the view with the current time.\n * \n * {\\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}\n * \n * \\@stable\n */\nexport class AsyncPipe implements OnDestroy, PipeTransform {\nprivate _latestValue: any = null;\nprivate _latestReturnedValue: any = null;\nprivate _subscription: ISubscription|Promise<any>|null = null;\nprivate _obj: Observable<any>|Promise<any>|EventEmitter<any>|null = null;\nprivate _strategy: SubscriptionStrategy = /** @type {?} */(( null));\n/**\n * @param {?} _ref\n */\nconstructor(private _ref: ChangeDetectorRef) {}\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n    if (this._subscription) {\n      this._dispose();\n    }\n  }\n\n  transform<T>(obj: null): null;\n  transform<T>(obj: undefined): undefined;\n  transform<T>(obj: Observable<T>): T|null;\n  transform<T>(obj: Promise<T>): T|null;\n/**\n * @param {?} obj\n * @return {?}\n */\ntransform(obj: Observable<any>|Promise<any>|null|undefined): any {\n    if (!this._obj) {\n      if (obj) {\n        this._subscribe(obj);\n      }\n      this._latestReturnedValue = this._latestValue;\n      return this._latestValue;\n    }\n\n    if (obj !== this._obj) {\n      this._dispose();\n      return this.transform( /** @type {?} */((obj as any)));\n    }\n\n    if (this._latestValue === this._latestReturnedValue) {\n      return this._latestReturnedValue;\n    }\n\n    this._latestReturnedValue = this._latestValue;\n    return WrappedValue.wrap(this._latestValue);\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nprivate _subscribe(obj: Observable<any>|Promise<any>|EventEmitter<any>): void {\n    this._obj = obj;\n    this._strategy = this._selectStrategy(obj);\n    this._subscription = this._strategy.createSubscription(\n        obj, (value: Object) => this._updateLatestValue(obj, value));\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nprivate _selectStrategy(obj: Observable<any>|Promise<any>|EventEmitter<any>): any {\n    if (ɵisPromise(obj)) {\n      return _promiseStrategy;\n    }\n\n    if (ɵisObservable(obj)) {\n      return _observableStrategy;\n    }\n\n    throw invalidPipeArgumentError(AsyncPipe, obj);\n  }\n/**\n * @return {?}\n */\nprivate _dispose(): void {\n    this._strategy.dispose( /** @type {?} */((this._subscription)));\n    this._latestValue = null;\n    this._latestReturnedValue = null;\n    this._subscription = null;\n    this._obj = null;\n  }\n/**\n * @param {?} async\n * @param {?} value\n * @return {?}\n */\nprivate _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      this._ref.markForCheck();\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'async', pure: false}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n];\n}\n\nfunction AsyncPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nAsyncPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAsyncPipe.ctorParameters;\n/** @type {?} */\nAsyncPipe.prototype._latestValue;\n/** @type {?} */\nAsyncPipe.prototype._latestReturnedValue;\n/** @type {?} */\nAsyncPipe.prototype._subscription;\n/** @type {?} */\nAsyncPipe.prototype._obj;\n/** @type {?} */\nAsyncPipe.prototype._strategy;\n/** @type {?} */\nAsyncPipe.prototype._ref;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * Transforms text to lowercase.\n * \n * {\\@example  common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe' }\n * \n * \\@stable\n */\nexport class LowerCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(LowerCasePipe, value);\n    }\n    return value.toLowerCase();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'lowercase'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LowerCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nLowerCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLowerCasePipe.ctorParameters;\n}\n\n/**\n * Helper method to transform a single word to titlecase.\n * \n * \\@stable\n * @param {?} word\n * @return {?}\n */\nfunction titleCaseWord(word: string) {\n  if (!word) return word;\n  return word[0].toUpperCase() + word.substr(1).toLowerCase();\n}\n/**\n * Transforms text to titlecase.\n * \n * \\@stable\n */\nexport class TitleCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(TitleCasePipe, value);\n    }\n\n    return value.split(/\\b/g).map(word => titleCaseWord(word)).join('');\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'titlecase'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TitleCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nTitleCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTitleCasePipe.ctorParameters;\n}\n\n/**\n * Transforms text to uppercase.\n * \n * \\@stable\n */\nexport class UpperCasePipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: string): string {\n    if (!value) return value;\n    if (typeof value !== 'string') {\n      throw invalidPipeArgumentError(UpperCasePipe, value);\n    }\n    return value.toUpperCase();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'uppercase'}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UpperCasePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nUpperCasePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUpperCasePipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {NgLocalization, getPluralCategory} from '../localization';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nconst /** @type {?} */ _INTERPOLATION_REGEXP: RegExp = /#/g;\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Maps a value to a string that pluralizes the value according to locale rules.\n * \\@howToUse `expression | i18nPlural:mapping`\n * \\@description \n * \n *  Where:\n *  - `expression` is a number.\n *  - `mapping` is an object that mimics the ICU format, see\n *    http://userguide.icu-project.org/formatparse/messages\n * \n *  ## Example\n * \n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}\n * \n * \\@experimental\n */\nexport class I18nPluralPipe implements PipeTransform {\n/**\n * @param {?} _localization\n */\nconstructor(private _localization: NgLocalization) {}\n/**\n * @param {?} value\n * @param {?} pluralMap\n * @return {?}\n */\ntransform(value: number, pluralMap: {[count: string]: string}): string {\n    if (value == null) return '';\n\n    if (typeof pluralMap !== 'object' || pluralMap === null) {\n      throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);\n    }\n\n    const /** @type {?} */ key = getPluralCategory(value, Object.keys(pluralMap), this._localization);\n\n    return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'i18nPlural', pure: true}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgLocalization, },\n];\n}\n\nfunction I18nPluralPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nI18nPluralPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nI18nPluralPipe.ctorParameters;\n/** @type {?} */\nI18nPluralPipe.prototype._localization;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Generic selector that displays the string that matches the current value.\n * \\@howToUse `expression | i18nSelect:mapping`\n * \\@description \n * \n *  Where `mapping` is an object that indicates the text that should be displayed\n *  for different values of the provided `expression`.\n *  If none of the keys of the mapping match the value of the `expression`, then the content\n *  of the `other` key is returned when present, otherwise an empty string is returned.\n * \n *  ## Example\n * \n * {\\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}\n * \n *  \\@experimental\n */\nexport class I18nSelectPipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} mapping\n * @return {?}\n */\ntransform(value: string|null|undefined, mapping: {[key: string]: string}): string {\n    if (value == null) return '';\n\n    if (typeof mapping !== 'object' || typeof value !== 'string') {\n      throw invalidPipeArgumentError(I18nSelectPipe, mapping);\n    }\n\n    if (mapping.hasOwnProperty(value)) {\n      return mapping[value];\n    }\n\n    if (mapping.hasOwnProperty('other')) {\n      return mapping['other'];\n    }\n\n    return '';\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'i18nSelect', pure: true}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction I18nSelectPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nI18nSelectPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nI18nSelectPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Pipe, PipeTransform} from '@angular/core';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Converts value into JSON string.\n * \\@howToUse `expression | json`\n * \\@description \n * \n * Converts value into string using `JSON.stringify`. Useful for debugging.\n * \n * ### Example\n * {\\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}\n * \n * \\@stable\n */\nexport class JsonPipe implements PipeTransform {\n/**\n * @param {?} value\n * @return {?}\n */\ntransform(value: any): string { return JSON.stringify(value, null, 2); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'json', pure: false}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction JsonPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonPipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Pipe, PipeTransform} from '@angular/core';\nimport {invalidPipeArgumentError} from './invalid_pipe_argument_error';\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Creates a new List or String containing a subset (slice) of the elements.\n * \\@howToUse `array_or_string_expression | slice:start[:end]`\n * \\@description \n * \n * Where the input expression is a `List` or `String`, and:\n * - `start`: The starting index of the subset to return.\n *   - **a positive integer**: return the item at `start` index and all items after\n *     in the list or string expression.\n *   - **a negative integer**: return the item at `start` index from the end and all items after\n *     in the list or string expression.\n *   - **if positive and greater than the size of the expression**: return an empty list or string.\n *   - **if negative and greater than the size of the expression**: return entire list or string.\n * - `end`: The ending index of the subset to return.\n *   - **omitted**: return all items until the end.\n *   - **if positive**: return all items before `end` index of the list or string.\n *   - **if negative**: return all items before `end` index from the end of the list or string.\n * \n * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`\n * and `String.prototype.slice()`.\n * \n * When operating on a [List], the returned list is always a copy even when all\n * the elements are being returned.\n * \n * When operating on a blank value, the pipe returns the blank value.\n * \n * ## List Example\n * \n * This `ngFor` example:\n * \n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}\n * \n * produces the following:\n * \n *     <li>b</li>\n *     <li>c</li>\n * \n * ## String Examples\n * \n * {\\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}\n * \n * \\@stable\n */\nexport class SlicePipe implements PipeTransform {\n/**\n * @param {?} value\n * @param {?} start\n * @param {?=} end\n * @return {?}\n */\ntransform(value: any, start: number, end?: number): any {\n    if (value == null) return value;\n\n    if (!this.supports(value)) {\n      throw invalidPipeArgumentError(SlicePipe, value);\n    }\n\n    return value.slice(start, end);\n  }\n/**\n * @param {?} obj\n * @return {?}\n */\nprivate supports(obj: any): boolean { return typeof obj === 'string' || Array.isArray(obj); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'slice', pure: false}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SlicePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nSlicePipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSlicePipe.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * This module provides a set of common Pipes.\n */\n\nimport {AsyncPipe} from './async_pipe';\nimport {LowerCasePipe, TitleCasePipe, UpperCasePipe} from './case_conversion_pipes';\nimport {DatePipe} from './date_pipe';\nimport {I18nPluralPipe} from './i18n_plural_pipe';\nimport {I18nSelectPipe} from './i18n_select_pipe';\nimport {JsonPipe} from './json_pipe';\nimport {CurrencyPipe, DecimalPipe, PercentPipe} from './number_pipe';\nimport {SlicePipe} from './slice_pipe';\n\nexport {\n  AsyncPipe,\n  CurrencyPipe,\n  DatePipe,\n  DecimalPipe,\n  I18nPluralPipe,\n  I18nSelectPipe,\n  JsonPipe,\n  LowerCasePipe,\n  PercentPipe,\n  SlicePipe,\n  TitleCasePipe,\n  UpperCasePipe\n};\n\n\n/**\n * A collection of Angular pipes that are likely to be used in each and every application.\n */\nexport const /** @type {?} */ COMMON_PIPES = [\n  AsyncPipe,\n  UpperCasePipe,\n  LowerCasePipe,\n  JsonPipe,\n  SlicePipe,\n  DecimalPipe,\n  PercentPipe,\n  TitleCasePipe,\n  CurrencyPipe,\n  DatePipe,\n  I18nPluralPipe,\n  I18nSelectPipe,\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {NgModule} from '@angular/core';\n\nimport {COMMON_DEPRECATED_DIRECTIVES, COMMON_DIRECTIVES} from './directives/index';\nimport {NgLocaleLocalization, NgLocalization} from './localization';\nimport {COMMON_PIPES} from './pipes/index';\n/**\n * The module that includes all the basic Angular directives like {\\@link NgIf}, {\\@link NgForOf}, ...\n * \n * \\@stable\n */\nexport class CommonModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [COMMON_DIRECTIVES, COMMON_PIPES],\n  exports: [COMMON_DIRECTIVES, COMMON_PIPES],\n  providers: [\n    {provide: NgLocalization, useClass: NgLocaleLocalization},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CommonModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCommonModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCommonModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is  called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observables internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remote this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2,5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nexport class DragDropDirectiveService {\nprivate dropItem = new Subject<any>();\nprivate draggedItem:any;\nconstructor() { }\n/**\n * @param {?} item\n * @return {?}\n */\npublic setDropItem(item){\n  \tthis.dropItem.next(item);\n  }\n/**\n * @return {?}\n */\npublic getDropItem(){\n  \treturn this.dropItem.asObservable();\n  }\n/**\n * @param {?} item\n * @return {?}\n */\npublic setDragItem(item){\n    this.draggedItem = item;\n  }\n/**\n * @return {?}\n */\npublic getDragItem(){\n    return this.draggedItem;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DragDropDirectiveService_tsickle_Closure_declarations() {\n/** @type {?} */\nDragDropDirectiveService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDragDropDirectiveService.ctorParameters;\n/** @type {?} */\nDragDropDirectiveService.prototype.dropItem;\n/** @type {?} */\nDragDropDirectiveService.prototype.draggedItem;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ElementRef, HostListener, Input, Output, EventEmitter, OnDestroy} from '@angular/core';\nimport { DragDropDirectiveService } from './drag-drop-directive.service';\nimport { Subscription } from 'rxjs/Subscription';\nexport class DragDirective implements OnDestroy{\n  \n  draggedItem:Object;\n  \n  cssHighlight:string;\n  \n  releaseDrop:EventEmitter<any> = new EventEmitter();\n  \n  startDrag:EventEmitter<any> = new EventEmitter();\nprivate highlighted:boolean = false;\nprivate dropSubscription:Subscription;\n/**\n * @param {?} el\n * @param {?} dragDropDirectiveService\n */\nconstructor(\nprivate el: ElementRef,\nprivate dragDropDirectiveService: DragDropDirectiveService\n   ) {\n  \tthis.el.nativeElement.draggable='true';\n  }\n/**\n * @return {?}\n */\nonMouseEnter() {\n    this.highlight();\n  }\n/**\n * @return {?}\n */\nonMouseOut(){\n  \tthis.highlight();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nonDragStart(event:any){\n    // html draggable will not transfer an object, so we stringify it\n    let /** @type {?} */ transferObject = { object: this.draggedItem, id: 'draggedItemID-' + new Date().getTime()}\n    let /** @type {?} */ transferObjectString = JSON.stringify(transferObject);\n    event.dataTransfer.setData(\"text\", transferObjectString);\n    this.dragDropDirectiveService.setDragItem(this.draggedItem);\n    this.dropSubscription = this.dragDropDirectiveService.getDropItem().subscribe(\n      item => {\n        this.emitDraggedItem(this.draggedItem);\n      }\n    );\n    this.startDrag.emit(this.draggedItem);\n  }\n/**\n * @return {?}\n */\nonDragEnd(){\n    if (typeof this.dropSubscription !== 'undefined'){\n      this.dropSubscription.unsubscribe();\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy(){\n    if (typeof this.dropSubscription !== 'undefined') {\n      this.dropSubscription.unsubscribe();\n    }\n  }\n/**\n * @param {?} item\n * @return {?}\n */\nprivate emitDraggedItem(item){\n    this.releaseDrop.emit(item);\n    this.dropSubscription.unsubscribe();\n  }\n/**\n * @return {?}\n */\nprivate highlight(){\n    if (this.cssHighlight){\n      if (!this.highlighted){\n        this.el.nativeElement.classList.add(this.cssHighlight);\n      } else {\n        this.el.nativeElement.classList.remove(this.cssHighlight);\n      }\n    }\n    this.highlighted = !this.highlighted;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[dragDirective]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: DragDropDirectiveService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'draggedItem': [{ type: Input, args: ['dragDirective', ] },],\n'cssHighlight': [{ type: Input, args: ['dragHightlight', ] },],\n'releaseDrop': [{ type: Output },],\n'startDrag': [{ type: Output },],\n'onMouseEnter': [{ type: HostListener, args: ['mouseenter', ] },],\n'onMouseOut': [{ type: HostListener, args: ['mouseleave', ] },],\n'onDragStart': [{ type: HostListener, args: ['dragstart', ['$event'], ] },],\n'onDragEnd': [{ type: HostListener, args: ['dragend', ] },],\n};\n}\n\nfunction DragDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nDragDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDragDirective.ctorParameters;\n/** @type {?} */\nDragDirective.propDecorators;\n/** @type {?} */\nDragDirective.prototype.draggedItem;\n/** @type {?} */\nDragDirective.prototype.cssHighlight;\n/** @type {?} */\nDragDirective.prototype.releaseDrop;\n/** @type {?} */\nDragDirective.prototype.startDrag;\n/** @type {?} */\nDragDirective.prototype.highlighted;\n/** @type {?} */\nDragDirective.prototype.dropSubscription;\n/** @type {?} */\nDragDirective.prototype.el;\n/** @type {?} */\nDragDirective.prototype.dragDropDirectiveService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ElementRef, HostListener, Input, Output,\nEventEmitter } from '@angular/core';\nimport { DragDropDirectiveService } from './drag-drop-directive.service';\nexport class DropDirective{\n  \n  cssHighlight:string;\n\t\n\tdropEvent:EventEmitter<any> = new EventEmitter();\n  \n  dragenterEvent:EventEmitter<any> = new EventEmitter();\n  \n  dragleaveEvent:EventEmitter<any> = new EventEmitter();\n  \n  dropEventMouse:EventEmitter<any> = new EventEmitter();\n  \n  dragoverMouseEvent:EventEmitter<any> = new EventEmitter();\nprivate highlighted:boolean = false;\nprivate dragItem:any;\n/**\n * @param {?} el\n * @param {?} dragDropDirectiveService\n */\nconstructor(\nprivate el: ElementRef,\nprivate dragDropDirectiveService: DragDropDirectiveService\n  ) {}\n/**\n * @return {?}\n */\nonDragEnter() {\n    this.dragItem = this.dragDropDirectiveService.getDragItem();\n    this.dragenterEvent.emit(this.dragItem);\n  \t//this.highlighted = true;\n    this.highlight();\n  }\n/**\n * @return {?}\n */\nonDragLeave(){\n    this.dragItem = this.dragDropDirectiveService.getDragItem();\n    this.dragleaveEvent.emit(this.dragItem);\n  \t//this.highlighted = false;\n  \tthis.highlight();\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nonDragOver(event:any){\n  \tevent.preventDefault();\n    this.dragoverMouseEvent.emit(event);\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nonDrop(event:any){\n    // check to see if we are getting what was sent. text/plain\n    let /** @type {?} */ eventData = event.dataTransfer.getData('text');\n    if (eventData && event.dataTransfer.files.length == 0){\n      event.preventDefault();\n      // since html draggable will not transer an object, we need to parse are string\n      let /** @type {?} */ transferredObjectString = JSON.parse(eventData);\n      let /** @type {?} */ transferredObjectID = transferredObjectString.id;\n      let /** @type {?} */ transferredObject = transferredObjectString.object;\n      this.dropEvent.emit(transferredObject);\n      this.dragDropDirectiveService.setDropItem(transferredObjectID);\n      \n    }\n    this.dropEventMouse.emit(event);\n    this.highlight();\n  }\n/**\n * @return {?}\n */\nprivate highlight(){\n    if (this.cssHighlight){\n      if (!this.highlighted){\n        this.el.nativeElement.classList.add(this.cssHighlight);\n      } else {\n        this.el.nativeElement.classList.remove(this.cssHighlight);\n      }\n    }\n    this.highlighted = !this.highlighted;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[dropDirective]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: DragDropDirectiveService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'cssHighlight': [{ type: Input, args: ['dropHighlight', ] },],\n'dropEvent': [{ type: Output },],\n'dragenterEvent': [{ type: Output },],\n'dragleaveEvent': [{ type: Output },],\n'dropEventMouse': [{ type: Output },],\n'dragoverMouseEvent': [{ type: Output },],\n'onDragEnter': [{ type: HostListener, args: ['dragenter', ] },],\n'onDragLeave': [{ type: HostListener, args: ['dragleave', ] },],\n'onDragOver': [{ type: HostListener, args: ['dragover', ['$event'], ] },],\n'onDrop': [{ type: HostListener, args: ['drop', ['$event'], ] },],\n};\n}\n\nfunction DropDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nDropDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDropDirective.ctorParameters;\n/** @type {?} */\nDropDirective.propDecorators;\n/** @type {?} */\nDropDirective.prototype.cssHighlight;\n/** @type {?} */\nDropDirective.prototype.dropEvent;\n/** @type {?} */\nDropDirective.prototype.dragenterEvent;\n/** @type {?} */\nDropDirective.prototype.dragleaveEvent;\n/** @type {?} */\nDropDirective.prototype.dropEventMouse;\n/** @type {?} */\nDropDirective.prototype.dragoverMouseEvent;\n/** @type {?} */\nDropDirective.prototype.highlighted;\n/** @type {?} */\nDropDirective.prototype.dragItem;\n/** @type {?} */\nDropDirective.prototype.el;\n/** @type {?} */\nDropDirective.prototype.dragDropDirectiveService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DragDirective } from './drag-directive.directive';\nimport { DropDirective } from './drop-directive.directive';\nimport { DragDropDirectiveService } from './drag-drop-directive.service';\nexport class DragDropDirectiveModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n  \tDragDirective,\n  \tDropDirective\n  ],\n  providers: [\n    DragDropDirectiveService\n  ],\n  exports: [\n  \tDragDirective,\n  \tDropDirective\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DragDropDirectiveModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDragDropDirectiveModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDragDropDirectiveModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["value","cases","ngLocalization","key","indexOf","getPluralCategory","locale","nLike","parseInt","n","nDecimal","toString","replace","i","Math","floor","abs","v","length","f","t","split","toLowerCase","Plural","One","Other","Zero","Two","Few","Many","inner","options","hour","hour12","timeZoneName","timezone","date","prop","len","result","format","fn","PATTERN_ALIASES","cacheKey","parts","DATE_FORMATTER_CACHE","get","match","DATE_FORMATS_SPLIT","exec","_format","concat","slice","pop","push","set","pipe","style","digits","currency","currencyAsSymbol","isNumeric","invalidPipeArgumentError","minInt","undefined","minFraction","maxFraction","NumberFormatStyle","Currency","_NUMBER_FORMAT_REGEXP","Error","parseIntAutoRadix","NumberFormatter","minimumIntegerDigits","minimumFractionDigits","text","Date","tzHour","tzMin","dateSetter","setUTCFullYear","setFullYear","timeSetter","setUTCHours","setHours","toInt","call","h","m","tryCatchTarget","apply","this","arguments","e","errorObject_1","errors","reduce","errs","err","UnsubscriptionError_1","PlatformLocation","state","title","url","LocationStrategy","queryParams","platformStrategy","_subject","EventEmitter","_platformStrategy","browserBaseHref","getBaseHref","_baseHref","Location","stripTrailingSlash","_stripIndexHtml","onPopState","ev","_this","emit","path","forward","start","end","slashes","endsWith","startsWith","substring","type","Injectable","_platformLocation","_super","__extends","onHashChange","HashLocationStrategy","includeHash","prepareExternalUrl","normalizeQueryParams","replaceState","ctorParameters","href","getBaseHrefFromDOM","PathLocationStrategy","externalUrl","NgLocaleLocalization","getPluralCase","NgLocalization","decorators","Inject","args","LOCALE_ID","_iterableDiffers","_keyValueDiffers","_ngEl","_renderer","Object","NgClass","_cleanupClasses","_rawClass","_iterableDiffer","_keyValueDiffer","ɵisListLikeIterable","find","create","iterableChanges","diff","_applyIterableChanges","keyValueChanges","changes","forEachAddedItem","record","_toggleClass","currentValue","forEachChangedItem","forEachRemovedItem","item","rawClassVal","isCleanup","Array","isArray","Set","forEach","klass","keys","enabled","setElementClass","nativeElement","Directive","selector","IterableDiffers","KeyValueDiffers","ElementRef","Renderer","propDecorators","NgComponentOutlet","_viewContainerRef","clear","_componentRef","ngComponentOutlet","elInjector","ngComponentOutletInjector","parentInjector","_moduleRef","destroy","ngComponentOutletNgModuleFactory","parentModule","NgModuleRef","injector","componentFactoryResolver","ViewContainerRef","Input","$implicit","ngForOf","index","count","NgForOfContext","_viewContainer","_template","_differs","NgForOf","_trackByFn","isDevMode","console","warn","JSON","stringify","_differ","ngForTrackBy","insertTuples","forEachOperation","adjustedPreviousIndex","currentIndex","previousIndex","view","createEmbeddedView","tuple","RecordViewTuple","remove","move","_perViewChange","ilen","viewRef","context","TemplateRef","templateRef","_context","NgIfContext","_thenTemplateRef","_updateView","NgIf","_thenViewRef","_elseViewRef","_elseTemplateRef","ngIfElse","_created","_templateRef","SwitchView","created","NgSwitch","newValue","matched","_ngSwitch","_lastCasesMatched","_lastCaseCheckIndex","_caseCount","_updateDefaultCases","useDefault","_defaultViews","_defaultUsed","enforceState","_view","viewContainer","NgSwitchCase","Host","ngSwitch","_addDefault","NgPlural","switchView","_caseViews","_activateView","_activeView","isANumber","isNaN","Number","ngPlural","addCase","template","NgPluralCase","NgStyle","_ngStyle","_a","name","unit","setElementStyle","NgTemplateOutlet","ngTemplateOutletContext","_viewRef","ngTemplateOutlet","COMMON_DIRECTIVES","ObservableStrategy","subscription","unsubscribe","PromiseStrategy","_ref","_latestValue","_strategy","AsyncPipe","obj","_obj","_dispose","transform","_latestReturnedValue","_subscribe","ɵisPromise","_promiseStrategy","dispose","async","markForCheck","Pipe","pure","LowerCasePipe","TitleCasePipe","map","word","titleCaseWord","join","UpperCasePipe","toUpperCase","Decimal","Percent","num","_b","maximumFractionDigits","_c","currencyDisplay","yMMMdjms","datePartGetterFactory","combine","digitCondition","nameCondition","yMdjm","yMMMMEEEEd","yMMMMd","yMMMd","jms","jm","DATE_FORMATS","yyyy","yy","y","MMMM","MMM","MM","M","LLLL","L","dd","d","HH","digitModifier","hourExtractor","hour12Modify","H","hh","jj","ss","s","sss","EEEE","EEE","EE","a","hourClockExtractor","z","timeZoneGetter","ww","w","DateFormatter","pattern","DecimalPipe","formatNumber","_locale","PercentPipe","CurrencyPipe","currencyCode","symbolDisplay","DatePipe","isBlank","trim","isDate","ISO8601_DATE_REGEX","isoStringToDate","_ALIASES","medium","short","fullDate","longDate","mediumDate","shortDate","mediumTime","I18nPluralPipe","pluralMap","_localization","_INTERPOLATION_REGEXP","I18nSelectPipe","mapping","hasOwnProperty","SlicePipe","COMMON_PIPES","JsonPipe","CommonModule","NgModule","declarations","exports","__window","window","__self","self","WorkerGlobalScope","__global","global","_root","x","tryCatcher","stack","message","_unsubscribe","Subscription","hasErrors","closed","_parent","_parents","_subscriptions","isFunction_1","trial","tryCatch_1","flattenUnsubscriptionErrors","isArray_1","sub","isObject_1","teardown","EMPTY","_addParent","tmp","subscriptions","subscriptionIndex","splice","parent","empty","next","error","complete","Symbol","root_1","for","destinationOrNext","destination","Observer_1","Subscriber","add","syncErrorThrowable","SafeSubscriber","rxSubscriber_1","subscriber","isStopped","_next","_error","_complete","Subscription_1","_parentSubscriber","observerOrNext","bind","__tryOrSetError","__tryOrUnsub","syncErrorValue","syncErrorThrown","wrappedComplete","nextOrObserver","Subscriber_1","$$observable","observable","getSymbolObservable","subscribe","Observable","operator","source","sink","toSubscriber_1","_trySubscribe","PromiseCtor","Rx","config","Promise","resolve","reject","observable_1","subject","SubjectSubscription","observers","subscriberIndex","Subject","SubjectSubscriber","AnonymousSubject","ObjectUnsubscribedError_1","copy","hasError","thrownError","SubjectSubscription_1","Observable_1","DragDropDirectiveService","dropItem","asObservable","draggedItem","el","dragDropDirectiveService","draggable","DragDirective","highlight","event","transferObject","object","id","getTime","transferObjectString","dataTransfer","setData","setDragItem","dropSubscription","getDropItem","emitDraggedItem","startDrag","releaseDrop","cssHighlight","highlighted","classList","Output","onMouseEnter","HostListener","onMouseOut","onDragStart","onDragEnd","DropDirective","dragItem","getDragItem","dragenterEvent","dragleaveEvent","preventDefault","dragoverMouseEvent","eventData","getData","files","transferredObjectString","parse","transferredObjectID","transferredObject","dropEvent","setDropItem","dropEventMouse","onDragEnter","onDragLeave","onDragOver","onDrop","imports","providers","DragDropDirectiveModule"],"mappings":"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"}